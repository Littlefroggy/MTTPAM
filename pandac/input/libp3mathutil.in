1484591014
3 2
13 libp3mathutil 4 LL_p 12 panda3d.core 
648
709 5 clear 0 4 1359 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 13 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

710 6 output 0 4 1359 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 14 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

711 19 ~PointerToArrayBase 0 4 1358 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

712 19 ConstPointerToArray 0 4 1357 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 3 1 2 3 0
299
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);
ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PyObject *self, PyObject *source);

713 4 size 0 4 1357 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
76
inline unsigned long int ConstPointerToArray< LMatrix3d >::size(void) const;

714 11 get_element 0 4 1357 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
97
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

715 11 __getitem__ 0 4 1357 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
90
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

716 8 get_data 0 4 1357 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
88
inline std::basic_string< char > ConstPointerToArray< LMatrix3d >::get_data(void) const;

717 11 get_subdata 0 4 1357 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
131
inline std::basic_string< char > ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

718 13 get_ref_count 0 4 1357 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

719 18 get_node_ref_count 0 4 1357 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

720 13 __getbuffer__ 0 4 1357 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 11 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

721 17 __releasebuffer__ 0 4 1357 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 12 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

722 20 ~ConstPointerToArray 0 4 1357 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

723 5 clear 0 4 1363 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 27 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

724 6 output 0 4 1363 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 28 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

725 19 ~PointerToArrayBase 0 4 1362 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

726 19 ConstPointerToArray 0 4 1361 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 3 15 16 17 0
299
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);
ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PyObject *self, PyObject *source);

727 4 size 0 4 1361 38 ConstPointerToArray< LMatrix3f >::size 0 1 18 0
76
inline unsigned long int ConstPointerToArray< LMatrix3f >::size(void) const;

728 11 get_element 0 4 1361 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 19 0
97
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

729 11 __getitem__ 0 4 1361 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 20 0
90
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

730 8 get_data 0 4 1361 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 21 0
88
inline std::basic_string< char > ConstPointerToArray< LMatrix3f >::get_data(void) const;

731 11 get_subdata 0 4 1361 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 22 0
131
inline std::basic_string< char > ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

732 13 get_ref_count 0 4 1361 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 23 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

733 18 get_node_ref_count 0 4 1361 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 24 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

734 13 __getbuffer__ 0 4 1361 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 25 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

735 17 __releasebuffer__ 0 4 1361 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 26 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

736 20 ~ConstPointerToArray 0 4 1361 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

737 5 clear 0 4 1366 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 41 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

738 6 output 0 4 1366 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 42 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

739 19 ~PointerToArrayBase 0 4 1365 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

740 19 ConstPointerToArray 0 4 1364 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 3 29 30 31 0
304
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);
ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PyObject *self, PyObject *source);

741 4 size 0 4 1364 39 ConstPointerToArray< LVecBase2d >::size 0 1 32 0
77
inline unsigned long int ConstPointerToArray< LVecBase2d >::size(void) const;

742 11 get_element 0 4 1364 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 33 0
99
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

743 11 __getitem__ 0 4 1364 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 34 0
92
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

744 8 get_data 0 4 1364 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 35 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2d >::get_data(void) const;

745 11 get_subdata 0 4 1364 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 36 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

746 13 get_ref_count 0 4 1364 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 37 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

747 18 get_node_ref_count 0 4 1364 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 38 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

748 13 __getbuffer__ 0 4 1364 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 39 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

749 17 __releasebuffer__ 0 4 1364 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 40 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

750 20 ~ConstPointerToArray 0 4 1364 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

751 5 clear 0 4 1369 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 55 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

752 6 output 0 4 1369 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 56 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

753 19 ~PointerToArrayBase 0 4 1368 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

754 19 ConstPointerToArray 0 4 1367 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 3 43 44 45 0
304
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);
ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PyObject *self, PyObject *source);

755 4 size 0 4 1367 39 ConstPointerToArray< LVecBase2f >::size 0 1 46 0
77
inline unsigned long int ConstPointerToArray< LVecBase2f >::size(void) const;

756 11 get_element 0 4 1367 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 47 0
99
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

757 11 __getitem__ 0 4 1367 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 48 0
92
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

758 8 get_data 0 4 1367 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 49 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2f >::get_data(void) const;

759 11 get_subdata 0 4 1367 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 50 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

760 13 get_ref_count 0 4 1367 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 51 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

761 18 get_node_ref_count 0 4 1367 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 52 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

762 13 __getbuffer__ 0 4 1367 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 53 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

763 17 __releasebuffer__ 0 4 1367 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 54 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

764 20 ~ConstPointerToArray 0 4 1367 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

765 5 clear 0 4 1372 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 69 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

766 6 output 0 4 1372 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 70 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(ostream &out) const;

767 19 ~PointerToArrayBase 0 4 1371 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

768 19 ConstPointerToArray 0 4 1370 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 3 57 58 59 0
304
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);
ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PyObject *self, PyObject *source);

769 4 size 0 4 1370 39 ConstPointerToArray< LVecBase2i >::size 0 1 60 0
77
inline unsigned long int ConstPointerToArray< LVecBase2i >::size(void) const;

770 11 get_element 0 4 1370 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 61 0
99
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

771 11 __getitem__ 0 4 1370 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 62 0
92
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

772 8 get_data 0 4 1370 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 63 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2i >::get_data(void) const;

773 11 get_subdata 0 4 1370 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 64 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

774 13 get_ref_count 0 4 1370 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 65 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

775 18 get_node_ref_count 0 4 1370 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 66 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

776 13 __getbuffer__ 0 4 1370 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 67 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

777 17 __releasebuffer__ 0 4 1370 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 68 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

778 20 ~ConstPointerToArray 0 4 1370 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

779 5 clear 0 4 1375 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 83 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

780 6 output 0 4 1375 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 84 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

781 19 ~PointerToArrayBase 0 4 1374 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

782 19 ConstPointerToArray 0 4 1373 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 3 71 72 73 0
304
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);
ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PyObject *self, PyObject *source);

783 4 size 0 4 1373 39 ConstPointerToArray< LVecBase3d >::size 0 1 74 0
77
inline unsigned long int ConstPointerToArray< LVecBase3d >::size(void) const;

784 11 get_element 0 4 1373 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 75 0
99
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

785 11 __getitem__ 0 4 1373 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 76 0
92
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

786 8 get_data 0 4 1373 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 77 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3d >::get_data(void) const;

787 11 get_subdata 0 4 1373 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 78 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

788 13 get_ref_count 0 4 1373 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 79 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

789 18 get_node_ref_count 0 4 1373 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 80 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

790 13 __getbuffer__ 0 4 1373 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 81 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

791 17 __releasebuffer__ 0 4 1373 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 82 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

792 20 ~ConstPointerToArray 0 4 1373 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

793 5 clear 0 4 1378 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 97 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

794 6 output 0 4 1378 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 98 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

795 19 ~PointerToArrayBase 0 4 1377 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

796 19 ConstPointerToArray 0 4 1376 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 3 85 86 87 0
304
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);
ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PyObject *self, PyObject *source);

797 4 size 0 4 1376 39 ConstPointerToArray< LVecBase3f >::size 0 1 88 0
77
inline unsigned long int ConstPointerToArray< LVecBase3f >::size(void) const;

798 11 get_element 0 4 1376 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 89 0
99
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

799 11 __getitem__ 0 4 1376 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 90 0
92
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

800 8 get_data 0 4 1376 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 91 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3f >::get_data(void) const;

801 11 get_subdata 0 4 1376 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 92 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

802 13 get_ref_count 0 4 1376 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 93 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

803 18 get_node_ref_count 0 4 1376 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 94 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

804 13 __getbuffer__ 0 4 1376 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 95 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

805 17 __releasebuffer__ 0 4 1376 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 96 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

806 20 ~ConstPointerToArray 0 4 1376 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

807 5 clear 0 4 1381 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 111 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

808 6 output 0 4 1381 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 112 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(ostream &out) const;

809 19 ~PointerToArrayBase 0 4 1380 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

810 19 ConstPointerToArray 0 4 1379 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 3 99 100 101 0
304
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);
ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PyObject *self, PyObject *source);

811 4 size 0 4 1379 39 ConstPointerToArray< LVecBase3i >::size 0 1 102 0
77
inline unsigned long int ConstPointerToArray< LVecBase3i >::size(void) const;

812 11 get_element 0 4 1379 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 103 0
99
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

813 11 __getitem__ 0 4 1379 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 104 0
92
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

814 8 get_data 0 4 1379 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 105 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3i >::get_data(void) const;

815 11 get_subdata 0 4 1379 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 106 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

816 13 get_ref_count 0 4 1379 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 107 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

817 18 get_node_ref_count 0 4 1379 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 108 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

818 13 __getbuffer__ 0 4 1379 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 109 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

819 17 __releasebuffer__ 0 4 1379 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 110 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

820 20 ~ConstPointerToArray 0 4 1379 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

821 5 clear 0 4 1384 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 125 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

822 6 output 0 4 1384 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 126 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

823 19 ~PointerToArrayBase 0 4 1383 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

824 19 ConstPointerToArray 0 4 1382 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 3 113 114 115 0
344
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);
ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PyObject *self, PyObject *source);

825 4 size 0 4 1382 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 116 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

826 11 get_element 0 4 1382 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 117 0
115
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

827 11 __getitem__ 0 4 1382 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 118 0
108
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

828 8 get_data 0 4 1382 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 119 0
97
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

829 11 get_subdata 0 4 1382 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 120 0
140
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

830 13 get_ref_count 0 4 1382 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 121 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

831 18 get_node_ref_count 0 4 1382 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 122 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

832 13 __getbuffer__ 0 4 1382 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 123 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

833 17 __releasebuffer__ 0 4 1382 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 124 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

834 20 ~ConstPointerToArray 0 4 1382 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

835 5 clear 0 4 1387 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 139 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

836 6 output 0 4 1387 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 140 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

837 19 ~PointerToArrayBase 0 4 1386 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

838 19 ConstPointerToArray 0 4 1385 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 3 127 128 129 0
344
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);
ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PyObject *self, PyObject *source);

839 4 size 0 4 1385 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 130 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

840 11 get_element 0 4 1385 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 131 0
115
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

841 11 __getitem__ 0 4 1385 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 132 0
108
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

842 8 get_data 0 4 1385 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 133 0
97
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

843 11 get_subdata 0 4 1385 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 134 0
140
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

844 13 get_ref_count 0 4 1385 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 135 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

845 18 get_node_ref_count 0 4 1385 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 136 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

846 13 __getbuffer__ 0 4 1385 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 137 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

847 17 __releasebuffer__ 0 4 1385 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 138 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

848 20 ~ConstPointerToArray 0 4 1385 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

849 5 clear 0 4 1390 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 153 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

850 6 output 0 4 1390 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 154 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

851 19 ~PointerToArrayBase 0 4 1389 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

852 19 ConstPointerToArray 0 4 1388 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 3 141 142 143 0
349
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);
ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PyObject *self, PyObject *source);

853 4 size 0 4 1388 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 144 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

854 11 get_element 0 4 1388 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 145 0
117
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

855 11 __getitem__ 0 4 1388 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 146 0
110
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

856 8 get_data 0 4 1388 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 147 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

857 11 get_subdata 0 4 1388 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 148 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

858 13 get_ref_count 0 4 1388 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 149 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

859 18 get_node_ref_count 0 4 1388 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 150 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

860 13 __getbuffer__ 0 4 1388 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 151 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

861 17 __releasebuffer__ 0 4 1388 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 152 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

862 20 ~ConstPointerToArray 0 4 1388 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

863 5 clear 0 4 1393 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 167 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

864 6 output 0 4 1393 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 168 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

865 19 ~PointerToArrayBase 0 4 1392 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

866 19 ConstPointerToArray 0 4 1391 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 3 155 156 157 0
349
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);
ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PyObject *self, PyObject *source);

867 4 size 0 4 1391 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 158 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

868 11 get_element 0 4 1391 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 159 0
117
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

869 11 __getitem__ 0 4 1391 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 160 0
110
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

870 8 get_data 0 4 1391 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 161 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

871 11 get_subdata 0 4 1391 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 162 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

872 13 get_ref_count 0 4 1391 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 163 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

873 18 get_node_ref_count 0 4 1391 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 164 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

874 13 __getbuffer__ 0 4 1391 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 165 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

875 17 __releasebuffer__ 0 4 1391 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 166 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

876 20 ~ConstPointerToArray 0 4 1391 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

877 5 clear 0 4 1396 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 181 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

878 6 output 0 4 1396 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 182 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(ostream &out) const;

879 19 ~PointerToArrayBase 0 4 1395 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

880 19 ConstPointerToArray 0 4 1394 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 3 169 170 171 0
349
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);
ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PyObject *self, PyObject *source);

881 4 size 0 4 1394 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 172 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

882 11 get_element 0 4 1394 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 173 0
117
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

883 11 __getitem__ 0 4 1394 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 174 0
110
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

884 8 get_data 0 4 1394 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 175 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

885 11 get_subdata 0 4 1394 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 176 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

886 13 get_ref_count 0 4 1394 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 177 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

887 18 get_node_ref_count 0 4 1394 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 178 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

888 13 __getbuffer__ 0 4 1394 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 179 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

889 17 __releasebuffer__ 0 4 1394 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 180 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

890 20 ~ConstPointerToArray 0 4 1394 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

891 14 PointerToArray 0 4 1397 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 183 184 185 0
292
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

892 11 empty_array 0 4 1397 40 PointerToArray< LMatrix3d >::empty_array 0 1 186 0
173
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LMatrix3d const *)(0))));

893 4 size 0 4 1397 33 PointerToArray< LMatrix3d >::size 0 1 187 0
71
inline unsigned long int PointerToArray< LMatrix3d >::size(void) const;

894 9 push_back 0 4 1397 38 PointerToArray< LMatrix3d >::push_back 0 1 188 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

895 8 pop_back 0 4 1397 37 PointerToArray< LMatrix3d >::pop_back 0 1 189 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

896 11 get_element 0 4 1397 40 PointerToArray< LMatrix3d >::get_element 0 1 190 0
92
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

897 11 set_element 0 4 1397 40 PointerToArray< LMatrix3d >::set_element 0 1 191 0
98
inline void PointerToArray< LMatrix3d >::set_element(unsigned long int n, LMatrix3d const &value);

898 11 __getitem__ 0 4 1397 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 192 0
85
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

899 11 __setitem__ 0 4 1397 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 193 0
91
void PointerToArray< LMatrix3d >::__setitem__(unsigned long int n, LMatrix3d const &value);

900 8 get_data 0 4 1397 37 PointerToArray< LMatrix3d >::get_data 0 1 194 0
83
inline std::basic_string< char > PointerToArray< LMatrix3d >::get_data(void) const;

901 8 set_data 0 4 1397 37 PointerToArray< LMatrix3d >::set_data 0 1 195 0
89
inline void PointerToArray< LMatrix3d >::set_data(std::basic_string< char > const &data);

902 11 get_subdata 0 4 1397 40 PointerToArray< LMatrix3d >::get_subdata 0 1 196 0
126
inline std::basic_string< char > PointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

903 11 set_subdata 0 4 1397 40 PointerToArray< LMatrix3d >::set_subdata 0 1 197 0
138
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

904 13 get_ref_count 0 4 1397 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 198 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

905 18 get_node_ref_count 0 4 1397 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 199 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

906 13 __getbuffer__ 0 4 1397 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 200 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

907 17 __releasebuffer__ 0 4 1397 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 201 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

908 15 ~PointerToArray 0 4 1397 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

909 14 PointerToArray 0 4 1398 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 202 203 204 0
292
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

910 11 empty_array 0 4 1398 40 PointerToArray< LMatrix3f >::empty_array 0 1 205 0
173
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LMatrix3f const *)(0))));

911 4 size 0 4 1398 33 PointerToArray< LMatrix3f >::size 0 1 206 0
71
inline unsigned long int PointerToArray< LMatrix3f >::size(void) const;

912 9 push_back 0 4 1398 38 PointerToArray< LMatrix3f >::push_back 0 1 207 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

913 8 pop_back 0 4 1398 37 PointerToArray< LMatrix3f >::pop_back 0 1 208 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

914 11 get_element 0 4 1398 40 PointerToArray< LMatrix3f >::get_element 0 1 209 0
92
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

915 11 set_element 0 4 1398 40 PointerToArray< LMatrix3f >::set_element 0 1 210 0
98
inline void PointerToArray< LMatrix3f >::set_element(unsigned long int n, LMatrix3f const &value);

916 11 __getitem__ 0 4 1398 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 211 0
85
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

917 11 __setitem__ 0 4 1398 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 212 0
91
void PointerToArray< LMatrix3f >::__setitem__(unsigned long int n, LMatrix3f const &value);

918 8 get_data 0 4 1398 37 PointerToArray< LMatrix3f >::get_data 0 1 213 0
83
inline std::basic_string< char > PointerToArray< LMatrix3f >::get_data(void) const;

919 8 set_data 0 4 1398 37 PointerToArray< LMatrix3f >::set_data 0 1 214 0
89
inline void PointerToArray< LMatrix3f >::set_data(std::basic_string< char > const &data);

920 11 get_subdata 0 4 1398 40 PointerToArray< LMatrix3f >::get_subdata 0 1 215 0
126
inline std::basic_string< char > PointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

921 11 set_subdata 0 4 1398 40 PointerToArray< LMatrix3f >::set_subdata 0 1 216 0
138
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

922 13 get_ref_count 0 4 1398 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 217 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

923 18 get_node_ref_count 0 4 1398 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 218 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

924 13 __getbuffer__ 0 4 1398 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 219 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

925 17 __releasebuffer__ 0 4 1398 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 220 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

926 15 ~PointerToArray 0 4 1398 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

927 14 PointerToArray 0 4 1399 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 221 222 223 0
297
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

928 11 empty_array 0 4 1399 41 PointerToArray< LVecBase2d >::empty_array 0 1 224 0
176
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2d const *)(0))));

929 4 size 0 4 1399 34 PointerToArray< LVecBase2d >::size 0 1 225 0
72
inline unsigned long int PointerToArray< LVecBase2d >::size(void) const;

930 9 push_back 0 4 1399 39 PointerToArray< LVecBase2d >::push_back 0 1 226 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

931 8 pop_back 0 4 1399 38 PointerToArray< LVecBase2d >::pop_back 0 1 227 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

932 11 get_element 0 4 1399 41 PointerToArray< LVecBase2d >::get_element 0 1 228 0
94
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

933 11 set_element 0 4 1399 41 PointerToArray< LVecBase2d >::set_element 0 1 229 0
100
inline void PointerToArray< LVecBase2d >::set_element(unsigned long int n, LVecBase2d const &value);

934 11 __getitem__ 0 4 1399 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 230 0
87
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

935 11 __setitem__ 0 4 1399 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 231 0
93
void PointerToArray< LVecBase2d >::__setitem__(unsigned long int n, LVecBase2d const &value);

936 8 get_data 0 4 1399 38 PointerToArray< LVecBase2d >::get_data 0 1 232 0
84
inline std::basic_string< char > PointerToArray< LVecBase2d >::get_data(void) const;

937 8 set_data 0 4 1399 38 PointerToArray< LVecBase2d >::set_data 0 1 233 0
90
inline void PointerToArray< LVecBase2d >::set_data(std::basic_string< char > const &data);

938 11 get_subdata 0 4 1399 41 PointerToArray< LVecBase2d >::get_subdata 0 1 234 0
127
inline std::basic_string< char > PointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

939 11 set_subdata 0 4 1399 41 PointerToArray< LVecBase2d >::set_subdata 0 1 235 0
139
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

940 13 get_ref_count 0 4 1399 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 236 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

941 18 get_node_ref_count 0 4 1399 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 237 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

942 13 __getbuffer__ 0 4 1399 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 238 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

943 17 __releasebuffer__ 0 4 1399 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 239 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

944 15 ~PointerToArray 0 4 1399 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

945 14 PointerToArray 0 4 1400 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 240 241 242 0
297
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

946 11 empty_array 0 4 1400 41 PointerToArray< LVecBase2f >::empty_array 0 1 243 0
176
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2f const *)(0))));

947 4 size 0 4 1400 34 PointerToArray< LVecBase2f >::size 0 1 244 0
72
inline unsigned long int PointerToArray< LVecBase2f >::size(void) const;

948 9 push_back 0 4 1400 39 PointerToArray< LVecBase2f >::push_back 0 1 245 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

949 8 pop_back 0 4 1400 38 PointerToArray< LVecBase2f >::pop_back 0 1 246 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

950 11 get_element 0 4 1400 41 PointerToArray< LVecBase2f >::get_element 0 1 247 0
94
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

951 11 set_element 0 4 1400 41 PointerToArray< LVecBase2f >::set_element 0 1 248 0
100
inline void PointerToArray< LVecBase2f >::set_element(unsigned long int n, LVecBase2f const &value);

952 11 __getitem__ 0 4 1400 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 249 0
87
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

953 11 __setitem__ 0 4 1400 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 250 0
93
void PointerToArray< LVecBase2f >::__setitem__(unsigned long int n, LVecBase2f const &value);

954 8 get_data 0 4 1400 38 PointerToArray< LVecBase2f >::get_data 0 1 251 0
84
inline std::basic_string< char > PointerToArray< LVecBase2f >::get_data(void) const;

955 8 set_data 0 4 1400 38 PointerToArray< LVecBase2f >::set_data 0 1 252 0
90
inline void PointerToArray< LVecBase2f >::set_data(std::basic_string< char > const &data);

956 11 get_subdata 0 4 1400 41 PointerToArray< LVecBase2f >::get_subdata 0 1 253 0
127
inline std::basic_string< char > PointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

957 11 set_subdata 0 4 1400 41 PointerToArray< LVecBase2f >::set_subdata 0 1 254 0
139
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

958 13 get_ref_count 0 4 1400 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 255 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

959 18 get_node_ref_count 0 4 1400 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 256 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

960 13 __getbuffer__ 0 4 1400 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 257 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

961 17 __releasebuffer__ 0 4 1400 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 258 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

962 15 ~PointerToArray 0 4 1400 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

963 14 PointerToArray 0 4 1401 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 259 260 261 0
297
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

964 11 empty_array 0 4 1401 41 PointerToArray< LVecBase2i >::empty_array 0 1 262 0
176
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2i const *)(0))));

965 4 size 0 4 1401 34 PointerToArray< LVecBase2i >::size 0 1 263 0
72
inline unsigned long int PointerToArray< LVecBase2i >::size(void) const;

966 9 push_back 0 4 1401 39 PointerToArray< LVecBase2i >::push_back 0 1 264 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

967 8 pop_back 0 4 1401 38 PointerToArray< LVecBase2i >::pop_back 0 1 265 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

968 11 get_element 0 4 1401 41 PointerToArray< LVecBase2i >::get_element 0 1 266 0
94
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

969 11 set_element 0 4 1401 41 PointerToArray< LVecBase2i >::set_element 0 1 267 0
100
inline void PointerToArray< LVecBase2i >::set_element(unsigned long int n, LVecBase2i const &value);

970 11 __getitem__ 0 4 1401 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 268 0
87
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

971 11 __setitem__ 0 4 1401 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 269 0
93
void PointerToArray< LVecBase2i >::__setitem__(unsigned long int n, LVecBase2i const &value);

972 8 get_data 0 4 1401 38 PointerToArray< LVecBase2i >::get_data 0 1 270 0
84
inline std::basic_string< char > PointerToArray< LVecBase2i >::get_data(void) const;

973 8 set_data 0 4 1401 38 PointerToArray< LVecBase2i >::set_data 0 1 271 0
90
inline void PointerToArray< LVecBase2i >::set_data(std::basic_string< char > const &data);

974 11 get_subdata 0 4 1401 41 PointerToArray< LVecBase2i >::get_subdata 0 1 272 0
127
inline std::basic_string< char > PointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

975 11 set_subdata 0 4 1401 41 PointerToArray< LVecBase2i >::set_subdata 0 1 273 0
139
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

976 13 get_ref_count 0 4 1401 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 274 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

977 18 get_node_ref_count 0 4 1401 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 275 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

978 13 __getbuffer__ 0 4 1401 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 276 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

979 17 __releasebuffer__ 0 4 1401 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 277 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

980 15 ~PointerToArray 0 4 1401 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

981 14 PointerToArray 0 4 1402 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 278 279 280 0
297
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

982 11 empty_array 0 4 1402 41 PointerToArray< LVecBase3d >::empty_array 0 1 281 0
176
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3d const *)(0))));

983 4 size 0 4 1402 34 PointerToArray< LVecBase3d >::size 0 1 282 0
72
inline unsigned long int PointerToArray< LVecBase3d >::size(void) const;

984 9 push_back 0 4 1402 39 PointerToArray< LVecBase3d >::push_back 0 1 283 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

985 8 pop_back 0 4 1402 38 PointerToArray< LVecBase3d >::pop_back 0 1 284 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

986 11 get_element 0 4 1402 41 PointerToArray< LVecBase3d >::get_element 0 1 285 0
94
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

987 11 set_element 0 4 1402 41 PointerToArray< LVecBase3d >::set_element 0 1 286 0
100
inline void PointerToArray< LVecBase3d >::set_element(unsigned long int n, LVecBase3d const &value);

988 11 __getitem__ 0 4 1402 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 287 0
87
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

989 11 __setitem__ 0 4 1402 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 288 0
93
void PointerToArray< LVecBase3d >::__setitem__(unsigned long int n, LVecBase3d const &value);

990 8 get_data 0 4 1402 38 PointerToArray< LVecBase3d >::get_data 0 1 289 0
84
inline std::basic_string< char > PointerToArray< LVecBase3d >::get_data(void) const;

991 8 set_data 0 4 1402 38 PointerToArray< LVecBase3d >::set_data 0 1 290 0
90
inline void PointerToArray< LVecBase3d >::set_data(std::basic_string< char > const &data);

992 11 get_subdata 0 4 1402 41 PointerToArray< LVecBase3d >::get_subdata 0 1 291 0
127
inline std::basic_string< char > PointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

993 11 set_subdata 0 4 1402 41 PointerToArray< LVecBase3d >::set_subdata 0 1 292 0
139
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

994 13 get_ref_count 0 4 1402 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 293 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

995 18 get_node_ref_count 0 4 1402 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 294 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

996 13 __getbuffer__ 0 4 1402 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 295 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

997 17 __releasebuffer__ 0 4 1402 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 296 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

998 15 ~PointerToArray 0 4 1402 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

999 14 PointerToArray 0 4 1403 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 297 298 299 0
297
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

1000 11 empty_array 0 4 1403 41 PointerToArray< LVecBase3f >::empty_array 0 1 300 0
176
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3f const *)(0))));

1001 4 size 0 4 1403 34 PointerToArray< LVecBase3f >::size 0 1 301 0
72
inline unsigned long int PointerToArray< LVecBase3f >::size(void) const;

1002 9 push_back 0 4 1403 39 PointerToArray< LVecBase3f >::push_back 0 1 302 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

1003 8 pop_back 0 4 1403 38 PointerToArray< LVecBase3f >::pop_back 0 1 303 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

1004 11 get_element 0 4 1403 41 PointerToArray< LVecBase3f >::get_element 0 1 304 0
94
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

1005 11 set_element 0 4 1403 41 PointerToArray< LVecBase3f >::set_element 0 1 305 0
100
inline void PointerToArray< LVecBase3f >::set_element(unsigned long int n, LVecBase3f const &value);

1006 11 __getitem__ 0 4 1403 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 306 0
87
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

1007 11 __setitem__ 0 4 1403 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 307 0
93
void PointerToArray< LVecBase3f >::__setitem__(unsigned long int n, LVecBase3f const &value);

1008 8 get_data 0 4 1403 38 PointerToArray< LVecBase3f >::get_data 0 1 308 0
84
inline std::basic_string< char > PointerToArray< LVecBase3f >::get_data(void) const;

1009 8 set_data 0 4 1403 38 PointerToArray< LVecBase3f >::set_data 0 1 309 0
90
inline void PointerToArray< LVecBase3f >::set_data(std::basic_string< char > const &data);

1010 11 get_subdata 0 4 1403 41 PointerToArray< LVecBase3f >::get_subdata 0 1 310 0
127
inline std::basic_string< char > PointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

1011 11 set_subdata 0 4 1403 41 PointerToArray< LVecBase3f >::set_subdata 0 1 311 0
139
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1012 13 get_ref_count 0 4 1403 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 312 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1013 18 get_node_ref_count 0 4 1403 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 313 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1014 13 __getbuffer__ 0 4 1403 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 314 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1015 17 __releasebuffer__ 0 4 1403 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 315 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1016 15 ~PointerToArray 0 4 1403 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1017 14 PointerToArray 0 4 1404 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 316 317 318 0
297
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1018 11 empty_array 0 4 1404 41 PointerToArray< LVecBase3i >::empty_array 0 1 319 0
176
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3i const *)(0))));

1019 4 size 0 4 1404 34 PointerToArray< LVecBase3i >::size 0 1 320 0
72
inline unsigned long int PointerToArray< LVecBase3i >::size(void) const;

1020 9 push_back 0 4 1404 39 PointerToArray< LVecBase3i >::push_back 0 1 321 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1021 8 pop_back 0 4 1404 38 PointerToArray< LVecBase3i >::pop_back 0 1 322 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1022 11 get_element 0 4 1404 41 PointerToArray< LVecBase3i >::get_element 0 1 323 0
94
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

1023 11 set_element 0 4 1404 41 PointerToArray< LVecBase3i >::set_element 0 1 324 0
100
inline void PointerToArray< LVecBase3i >::set_element(unsigned long int n, LVecBase3i const &value);

1024 11 __getitem__ 0 4 1404 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 325 0
87
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

1025 11 __setitem__ 0 4 1404 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 326 0
93
void PointerToArray< LVecBase3i >::__setitem__(unsigned long int n, LVecBase3i const &value);

1026 8 get_data 0 4 1404 38 PointerToArray< LVecBase3i >::get_data 0 1 327 0
84
inline std::basic_string< char > PointerToArray< LVecBase3i >::get_data(void) const;

1027 8 set_data 0 4 1404 38 PointerToArray< LVecBase3i >::set_data 0 1 328 0
90
inline void PointerToArray< LVecBase3i >::set_data(std::basic_string< char > const &data);

1028 11 get_subdata 0 4 1404 41 PointerToArray< LVecBase3i >::get_subdata 0 1 329 0
127
inline std::basic_string< char > PointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

1029 11 set_subdata 0 4 1404 41 PointerToArray< LVecBase3i >::set_subdata 0 1 330 0
139
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1030 13 get_ref_count 0 4 1404 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 331 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1031 18 get_node_ref_count 0 4 1404 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 332 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1032 13 __getbuffer__ 0 4 1404 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 333 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1033 17 __releasebuffer__ 0 4 1404 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 334 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1034 15 ~PointerToArray 0 4 1404 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1035 14 PointerToArray 0 4 1405 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 335 336 337 0
337
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1036 11 empty_array 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 338 0
200
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4d const *)(0))));

1037 4 size 0 4 1405 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 339 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1038 9 push_back 0 4 1405 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 340 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1039 8 pop_back 0 4 1405 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 341 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1040 11 get_element 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 342 0
110
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

1041 11 set_element 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 343 0
116
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long int n, UnalignedLMatrix4d const &value);

1042 11 __getitem__ 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 344 0
103
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

1043 11 __setitem__ 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 345 0
109
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long int n, UnalignedLMatrix4d const &value);

1044 8 get_data 0 4 1405 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 346 0
92
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1045 8 set_data 0 4 1405 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 347 0
98
inline void PointerToArray< UnalignedLMatrix4d >::set_data(std::basic_string< char > const &data);

1046 11 get_subdata 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 348 0
135
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1047 11 set_subdata 0 4 1405 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 349 0
147
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1048 13 get_ref_count 0 4 1405 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 350 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1049 18 get_node_ref_count 0 4 1405 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 351 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1050 13 __getbuffer__ 0 4 1405 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 352 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1051 17 __releasebuffer__ 0 4 1405 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 353 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1052 15 ~PointerToArray 0 4 1405 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1053 14 PointerToArray 0 4 1406 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 354 355 356 0
337
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1054 11 empty_array 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 357 0
200
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4f const *)(0))));

1055 4 size 0 4 1406 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 358 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1056 9 push_back 0 4 1406 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 359 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1057 8 pop_back 0 4 1406 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 360 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1058 11 get_element 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 361 0
110
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

1059 11 set_element 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 362 0
116
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long int n, UnalignedLMatrix4f const &value);

1060 11 __getitem__ 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 363 0
103
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

1061 11 __setitem__ 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 364 0
109
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long int n, UnalignedLMatrix4f const &value);

1062 8 get_data 0 4 1406 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 365 0
92
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1063 8 set_data 0 4 1406 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 366 0
98
inline void PointerToArray< UnalignedLMatrix4f >::set_data(std::basic_string< char > const &data);

1064 11 get_subdata 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 367 0
135
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1065 11 set_subdata 0 4 1406 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 368 0
147
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1066 13 get_ref_count 0 4 1406 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 369 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1067 18 get_node_ref_count 0 4 1406 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 370 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1068 13 __getbuffer__ 0 4 1406 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 371 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1069 17 __releasebuffer__ 0 4 1406 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 372 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1070 15 ~PointerToArray 0 4 1406 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1071 14 PointerToArray 0 4 1407 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 373 374 375 0
342
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1072 11 empty_array 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 376 0
203
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4d const *)(0))));

1073 4 size 0 4 1407 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 377 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1074 9 push_back 0 4 1407 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 378 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1075 8 pop_back 0 4 1407 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 379 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1076 11 get_element 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 380 0
112
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

1077 11 set_element 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 381 0
118
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long int n, UnalignedLVecBase4d const &value);

1078 11 __getitem__ 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 382 0
105
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

1079 11 __setitem__ 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 383 0
111
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long int n, UnalignedLVecBase4d const &value);

1080 8 get_data 0 4 1407 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 384 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1081 8 set_data 0 4 1407 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 385 0
99
inline void PointerToArray< UnalignedLVecBase4d >::set_data(std::basic_string< char > const &data);

1082 11 get_subdata 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 386 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1083 11 set_subdata 0 4 1407 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 387 0
148
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1084 13 get_ref_count 0 4 1407 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 388 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1085 18 get_node_ref_count 0 4 1407 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 389 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1086 13 __getbuffer__ 0 4 1407 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 390 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1087 17 __releasebuffer__ 0 4 1407 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 391 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1088 15 ~PointerToArray 0 4 1407 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1089 14 PointerToArray 0 4 1408 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 392 393 394 0
342
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1090 11 empty_array 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 395 0
203
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4f const *)(0))));

1091 4 size 0 4 1408 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 396 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1092 9 push_back 0 4 1408 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 397 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1093 8 pop_back 0 4 1408 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 398 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1094 11 get_element 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 399 0
112
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

1095 11 set_element 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 400 0
118
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long int n, UnalignedLVecBase4f const &value);

1096 11 __getitem__ 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 401 0
105
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

1097 11 __setitem__ 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 402 0
111
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long int n, UnalignedLVecBase4f const &value);

1098 8 get_data 0 4 1408 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 403 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1099 8 set_data 0 4 1408 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 404 0
99
inline void PointerToArray< UnalignedLVecBase4f >::set_data(std::basic_string< char > const &data);

1100 11 get_subdata 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 405 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1101 11 set_subdata 0 4 1408 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 406 0
148
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1102 13 get_ref_count 0 4 1408 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 407 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1103 18 get_node_ref_count 0 4 1408 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 408 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1104 13 __getbuffer__ 0 4 1408 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 409 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1105 17 __releasebuffer__ 0 4 1408 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 410 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1106 15 ~PointerToArray 0 4 1408 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1107 14 PointerToArray 0 4 1409 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 411 412 413 0
342
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1108 11 empty_array 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 414 0
203
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4i const *)(0))));

1109 4 size 0 4 1409 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 415 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1110 9 push_back 0 4 1409 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 416 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1111 8 pop_back 0 4 1409 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 417 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1112 11 get_element 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 418 0
112
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

1113 11 set_element 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 419 0
118
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long int n, UnalignedLVecBase4i const &value);

1114 11 __getitem__ 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 420 0
105
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

1115 11 __setitem__ 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 421 0
111
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long int n, UnalignedLVecBase4i const &value);

1116 8 get_data 0 4 1409 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 422 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1117 8 set_data 0 4 1409 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 423 0
99
inline void PointerToArray< UnalignedLVecBase4i >::set_data(std::basic_string< char > const &data);

1118 11 get_subdata 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 424 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

1119 11 set_subdata 0 4 1409 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 425 0
148
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1120 13 get_ref_count 0 4 1409 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 426 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1121 18 get_node_ref_count 0 4 1409 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 427 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1122 13 __getbuffer__ 0 4 1409 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 428 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1123 17 __releasebuffer__ 0 4 1409 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 429 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1124 15 ~PointerToArray 0 4 1409 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1125 9 make_copy 0 6 1410 25 BoundingVolume::make_copy 0 1 430 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1126 8 is_empty 0 4 1410 24 BoundingVolume::is_empty 0 1 431 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1127 11 is_infinite 0 4 1410 27 BoundingVolume::is_infinite 0 1 432 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1128 12 set_infinite 0 4 1410 28 BoundingVolume::set_infinite 0 1 433 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1129 9 extend_by 0 4 1410 25 BoundingVolume::extend_by 0 1 434 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1130 8 contains 0 4 1410 24 BoundingVolume::contains 0 1 435 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1131 6 output 0 6 1410 22 BoundingVolume::output 0 1 436 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

1132 5 write 0 6 1410 21 BoundingVolume::write 0 1 437 10
/**
 *
 */
77
virtual void BoundingVolume::write(ostream &out, int indent_level = 0) const;

1133 14 get_class_type 0 4 1410 30 BoundingVolume::get_class_type 0 1 438 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1134 15 ~BoundingVolume 0 4 1410 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1135 9 extend_by 0 4 1414 34 GeometricBoundingVolume::extend_by 0 2 439 440 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1136 8 contains 0 4 1414 33 GeometricBoundingVolume::contains 0 3 441 442 443 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1137 17 get_approx_center 0 6 1414 42 GeometricBoundingVolume::get_approx_center 0 1 444 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1138 5 xform 0 6 1414 30 GeometricBoundingVolume::xform 0 1 445 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1139 14 get_class_type 0 4 1414 39 GeometricBoundingVolume::get_class_type 0 1 446 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1140 24 ~GeometricBoundingVolume 0 4 1414 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1141 7 get_min 0 6 1415 29 FiniteBoundingVolume::get_min 0 1 447 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1142 7 get_max 0 6 1415 29 FiniteBoundingVolume::get_max 0 1 448 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1143 10 get_volume 0 6 1415 32 FiniteBoundingVolume::get_volume 0 1 449 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1144 14 get_class_type 0 4 1415 36 FiniteBoundingVolume::get_class_type 0 1 450 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1145 21 ~FiniteBoundingVolume 0 4 1415 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1146 10 LParabolaf 0 4 1416 22 LParabolaf::LParabolaf 0 3 451 452 453 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1147 10 operator = 0 4 1416 22 LParabolaf::operator = 0 1 454 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1148 11 ~LParabolaf 0 4 1416 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1149 5 xform 0 4 1416 17 LParabolaf::xform 0 1 455 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1150 5 get_a 0 4 1416 17 LParabolaf::get_a 0 1 456 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1151 5 get_b 0 4 1416 17 LParabolaf::get_b 0 1 457 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1152 5 get_c 0 4 1416 17 LParabolaf::get_c 0 1 458 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1153 10 calc_point 0 4 1416 22 LParabolaf::calc_point 0 1 459 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1154 6 output 0 4 1416 18 LParabolaf::output 0 1 460 10
/**
 *
 */
44
void LParabolaf::output(ostream &out) const;

1155 5 write 0 4 1416 17 LParabolaf::write 0 1 461 10
/**
 *
 */
65
void LParabolaf::write(ostream &out, int indent_level = 0) const;

1156 20 write_datagram_fixed 0 4 1416 32 LParabolaf::write_datagram_fixed 0 1 462 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1157 19 read_datagram_fixed 0 4 1416 31 LParabolaf::read_datagram_fixed 0 1 463 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1158 14 write_datagram 0 4 1416 26 LParabolaf::write_datagram 0 1 464 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1159 13 read_datagram 0 4 1416 25 LParabolaf::read_datagram 0 1 465 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1160 10 LParabolad 0 4 1417 22 LParabolad::LParabolad 0 3 466 467 468 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1161 10 operator = 0 4 1417 22 LParabolad::operator = 0 1 469 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1162 11 ~LParabolad 0 4 1417 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1163 5 xform 0 4 1417 17 LParabolad::xform 0 1 470 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1164 5 get_a 0 4 1417 17 LParabolad::get_a 0 1 471 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1165 5 get_b 0 4 1417 17 LParabolad::get_b 0 1 472 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1166 5 get_c 0 4 1417 17 LParabolad::get_c 0 1 473 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1167 10 calc_point 0 4 1417 22 LParabolad::calc_point 0 1 474 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1168 6 output 0 4 1417 18 LParabolad::output 0 1 475 10
/**
 *
 */
44
void LParabolad::output(ostream &out) const;

1169 5 write 0 4 1417 17 LParabolad::write 0 1 476 10
/**
 *
 */
65
void LParabolad::write(ostream &out, int indent_level = 0) const;

1170 20 write_datagram_fixed 0 4 1417 32 LParabolad::write_datagram_fixed 0 1 477 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1171 19 read_datagram_fixed 0 4 1417 31 LParabolad::read_datagram_fixed 0 1 478 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1172 14 write_datagram 0 4 1417 26 LParabolad::write_datagram 0 1 479 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1173 13 read_datagram 0 4 1417 25 LParabolad::read_datagram 0 1 480 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1174 7 LPlanef 0 4 1419 16 LPlanef::LPlanef 0 6 481 482 483 484 485 486 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1175 10 operator * 0 4 1419 19 LPlanef::operator * 0 2 487 488 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1176 11 operator *= 0 4 1419 20 LPlanef::operator *= 0 1 489 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1177 5 xform 0 4 1419 14 LPlanef::xform 0 1 490 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1178 10 operator - 0 68 1419 19 LPlanef::operator - 0 1 491 0
47
inline LPlanef LPlanef::operator -(void) const;

1179 18 get_reflection_mat 0 4 1419 27 LPlanef::get_reflection_mat 0 1 492 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1180 10 get_normal 0 4 1419 19 LPlanef::get_normal 0 1 493 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1181 9 get_point 0 4 1419 18 LPlanef::get_point 0 1 494 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1182 13 dist_to_plane 0 4 1419 22 LPlanef::dist_to_plane 0 1 495 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1183 7 project 0 4 1419 16 LPlanef::project 0 1 496 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1184 4 flip 0 4 1419 13 LPlanef::flip 0 1 497 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1185 15 intersects_line 0 4 1419 24 LPlanef::intersects_line 0 1 498 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1186 16 intersects_plane 0 4 1419 25 LPlanef::intersects_plane 0 1 499 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1187 19 intersects_parabola 0 4 1419 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1188 6 output 0 4 1419 15 LPlanef::output 0 1 500 10
/**
 *
 */
41
void LPlanef::output(ostream &out) const;

1189 5 write 0 4 1419 14 LPlanef::write 0 1 501 10
/**
 *
 */
62
void LPlanef::write(ostream &out, int indent_level = 0) const;

1190 8 ~LPlanef 0 4 1419 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1191 7 LPlaned 0 4 1421 16 LPlaned::LPlaned 0 6 502 503 504 505 506 507 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1192 10 operator * 0 4 1421 19 LPlaned::operator * 0 2 508 509 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1193 11 operator *= 0 4 1421 20 LPlaned::operator *= 0 1 510 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1194 5 xform 0 4 1421 14 LPlaned::xform 0 1 511 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1195 10 operator - 0 68 1421 19 LPlaned::operator - 0 1 512 0
47
inline LPlaned LPlaned::operator -(void) const;

1196 18 get_reflection_mat 0 4 1421 27 LPlaned::get_reflection_mat 0 1 513 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1197 10 get_normal 0 4 1421 19 LPlaned::get_normal 0 1 514 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1198 9 get_point 0 4 1421 18 LPlaned::get_point 0 1 515 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1199 13 dist_to_plane 0 4 1421 22 LPlaned::dist_to_plane 0 1 516 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1200 7 project 0 4 1421 16 LPlaned::project 0 1 517 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1201 4 flip 0 4 1421 13 LPlaned::flip 0 1 518 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1202 15 intersects_line 0 4 1421 24 LPlaned::intersects_line 0 1 519 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1203 16 intersects_plane 0 4 1421 25 LPlaned::intersects_plane 0 1 520 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1204 19 intersects_parabola 0 4 1421 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1205 6 output 0 4 1421 15 LPlaned::output 0 1 521 10
/**
 *
 */
41
void LPlaned::output(ostream &out) const;

1206 5 write 0 4 1421 14 LPlaned::write 0 1 522 10
/**
 *
 */
62
void LPlaned::write(ostream &out, int indent_level = 0) const;

1207 8 ~LPlaned 0 4 1421 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1208 11 BoundingBox 0 4 1427 24 BoundingBox::BoundingBox 0 2 523 524 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
111
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1209 12 operator new 0 4 1427 25 BoundingBox::operator new 0 1 525 0
126
inline void *BoundingBox::operator new(std::size_t size);
inline void *BoundingBox::operator new(std::size_t size, void *ptr);

1210 15 operator delete 0 4 1427 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1211 12 validate_ptr 0 4 1427 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1212 14 get_num_points 0 4 1427 27 BoundingBox::get_num_points 0 1 526 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1213 9 get_point 0 4 1427 22 BoundingBox::get_point 0 1 527 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1214 14 get_num_planes 0 4 1427 27 BoundingBox::get_num_planes 0 1 528 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1215 9 get_plane 0 4 1427 22 BoundingBox::get_plane 0 1 529 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1216 11 set_min_max 0 4 1427 24 BoundingBox::set_min_max 0 1 530 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1217 14 get_class_type 0 4 1427 27 BoundingBox::get_class_type 0 1 531 0
52
static TypeHandle BoundingBox::get_class_type(void);

1218 12 ~BoundingBox 0 4 1427 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1219 9 LFrustumf 0 4 1430 20 LFrustumf::LFrustumf 0 2 532 533 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1220 13 make_ortho_2D 0 4 1430 24 LFrustumf::make_ortho_2D 0 2 534 535 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1221 10 make_ortho 0 4 1430 21 LFrustumf::make_ortho 0 2 536 537 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1222 21 make_perspective_hfov 0 4 1430 32 LFrustumf::make_perspective_hfov 0 1 538 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1223 21 make_perspective_vfov 0 4 1430 32 LFrustumf::make_perspective_vfov 0 1 539 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1224 16 make_perspective 0 4 1430 27 LFrustumf::make_perspective 0 1 540 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1225 22 get_perspective_params 0 4 1430 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1226 10 ~LFrustumf 0 4 1430 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1227 9 LFrustumd 0 4 1431 20 LFrustumd::LFrustumd 0 2 541 542 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1228 13 make_ortho_2D 0 4 1431 24 LFrustumd::make_ortho_2D 0 2 543 544 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1229 10 make_ortho 0 4 1431 21 LFrustumd::make_ortho 0 2 545 546 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1230 21 make_perspective_hfov 0 4 1431 32 LFrustumd::make_perspective_hfov 0 1 547 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1231 21 make_perspective_vfov 0 4 1431 32 LFrustumd::make_perspective_vfov 0 1 548 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1232 16 make_perspective 0 4 1431 27 LFrustumd::make_perspective 0 1 549 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1233 22 get_perspective_params 0 4 1431 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1234 10 ~LFrustumd 0 4 1431 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1235 18 BoundingHexahedron 0 4 1436 38 BoundingHexahedron::BoundingHexahedron 0 2 550 551 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1236 14 get_num_points 0 4 1436 34 BoundingHexahedron::get_num_points 0 1 552 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1237 9 get_point 0 4 1436 29 BoundingHexahedron::get_point 0 1 553 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1238 14 get_num_planes 0 4 1436 34 BoundingHexahedron::get_num_planes 0 1 554 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1239 9 get_plane 0 4 1436 29 BoundingHexahedron::get_plane 0 1 555 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1240 14 get_class_type 0 4 1436 34 BoundingHexahedron::get_class_type 0 1 556 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1241 19 ~BoundingHexahedron 0 4 1436 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1242 12 BoundingLine 0 4 1437 26 BoundingLine::BoundingLine 0 1 557 22
/**
 *
 */

/**
 *
 */
70
inline BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1243 12 operator new 0 4 1437 26 BoundingLine::operator new 0 1 558 0
128
inline void *BoundingLine::operator new(std::size_t size);
inline void *BoundingLine::operator new(std::size_t size, void *ptr);

1244 15 operator delete 0 4 1437 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1245 12 validate_ptr 0 4 1437 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1246 11 get_point_a 0 4 1437 25 BoundingLine::get_point_a 0 1 559 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1247 11 get_point_b 0 4 1437 25 BoundingLine::get_point_b 0 1 560 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1248 14 get_class_type 0 4 1437 28 BoundingLine::get_class_type 0 1 561 0
53
static TypeHandle BoundingLine::get_class_type(void);

1249 13 ~BoundingLine 0 4 1437 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1250 13 BoundingPlane 0 4 1438 28 BoundingPlane::BoundingPlane 0 2 562 563 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1251 12 operator new 0 4 1438 27 BoundingPlane::operator new 0 1 564 0
130
inline void *BoundingPlane::operator new(std::size_t size);
inline void *BoundingPlane::operator new(std::size_t size, void *ptr);

1252 15 operator delete 0 4 1438 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1253 12 validate_ptr 0 4 1438 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1254 9 get_plane 0 4 1438 24 BoundingPlane::get_plane 0 1 565 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1255 14 get_class_type 0 4 1438 29 BoundingPlane::get_class_type 0 1 566 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1256 14 ~BoundingPlane 0 4 1438 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1257 14 BoundingSphere 0 4 1439 30 BoundingSphere::BoundingSphere 0 2 567 568 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
126
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1258 12 operator new 0 4 1439 28 BoundingSphere::operator new 0 1 569 0
132
inline void *BoundingSphere::operator new(std::size_t size);
inline void *BoundingSphere::operator new(std::size_t size, void *ptr);

1259 15 operator delete 0 4 1439 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1260 12 validate_ptr 0 4 1439 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1261 10 get_center 0 4 1439 26 BoundingSphere::get_center 0 1 570 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1262 10 get_radius 0 4 1439 26 BoundingSphere::get_radius 0 1 571 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1263 10 set_center 0 4 1439 26 BoundingSphere::set_center 0 1 572 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1264 10 set_radius 0 4 1439 26 BoundingSphere::set_radius 0 1 573 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1265 14 get_class_type 0 4 1439 30 BoundingSphere::get_class_type 0 1 574 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1266 15 ~BoundingSphere 0 4 1439 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1267 26 IntersectionBoundingVolume 0 4 1440 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 575 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1268 12 operator new 0 4 1440 40 IntersectionBoundingVolume::operator new 0 1 576 0
156
inline void *IntersectionBoundingVolume::operator new(std::size_t size);
inline void *IntersectionBoundingVolume::operator new(std::size_t size, void *ptr);

1269 15 operator delete 0 4 1440 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1270 12 validate_ptr 0 4 1440 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1271 18 get_num_components 0 4 1440 46 IntersectionBoundingVolume::get_num_components 0 1 577 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1272 13 get_component 0 4 1440 41 IntersectionBoundingVolume::get_component 0 1 578 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1273 16 clear_components 0 4 1440 44 IntersectionBoundingVolume::clear_components 0 1 579 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1274 13 add_component 0 4 1440 41 IntersectionBoundingVolume::add_component 0 1 580 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1275 14 get_class_type 0 4 1440 42 IntersectionBoundingVolume::get_class_type 0 1 581 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1276 27 ~IntersectionBoundingVolume 0 4 1440 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1277 8 heads_up 0 1 0 8 heads_up 0 12 681 682 683 684 685 686 687 688 689 690 691 692 0
1231
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1278 7 look_at 0 1 0 7 look_at 0 12 693 694 695 696 697 698 699 700 701 702 703 704 0
1219
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1279 8 Mersenne 0 4 1443 18 Mersenne::Mersenne 0 1 582 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1280 10 get_uint31 0 4 1443 20 Mersenne::get_uint31 0 1 583 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1281 9 ~Mersenne 0 4 1443 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1282 18 OmniBoundingVolume 0 4 1445 38 OmniBoundingVolume::OmniBoundingVolume 0 1 584 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1283 14 get_class_type 0 4 1445 34 OmniBoundingVolume::get_class_type 0 1 585 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1284 19 ~OmniBoundingVolume 0 4 1445 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1285 19 UnionBoundingVolume 0 4 1446 40 UnionBoundingVolume::UnionBoundingVolume 0 1 586 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1286 12 operator new 0 4 1446 33 UnionBoundingVolume::operator new 0 1 587 0
142
inline void *UnionBoundingVolume::operator new(std::size_t size);
inline void *UnionBoundingVolume::operator new(std::size_t size, void *ptr);

1287 15 operator delete 0 4 1446 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1288 12 validate_ptr 0 4 1446 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1289 18 get_num_components 0 4 1446 39 UnionBoundingVolume::get_num_components 0 1 588 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1290 13 get_component 0 4 1446 34 UnionBoundingVolume::get_component 0 1 589 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1291 16 clear_components 0 4 1446 37 UnionBoundingVolume::clear_components 0 1 590 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1292 13 add_component 0 4 1446 34 UnionBoundingVolume::add_component 0 1 591 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1293 19 filter_intersection 0 4 1446 40 UnionBoundingVolume::filter_intersection 0 1 592 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1294 14 get_class_type 0 4 1446 35 UnionBoundingVolume::get_class_type 0 1 593 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1295 20 ~UnionBoundingVolume 0 4 1446 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1296 10 Randomizer 0 4 1447 22 Randomizer::Randomizer 0 2 594 595 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
113
inline Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1297 10 operator = 0 4 1447 22 Randomizer::operator = 0 1 596 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1298 10 random_int 0 4 1447 22 Randomizer::random_int 0 1 597 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1299 11 random_real 0 4 1447 23 Randomizer::random_real 0 1 598 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1300 16 random_real_unit 0 4 1447 28 Randomizer::random_real_unit 0 1 599 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1301 13 get_next_seed 0 4 1447 25 Randomizer::get_next_seed 0 1 600 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1302 8 get_seed 0 4 1447 20 Randomizer::get_seed 0 1 601 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1303 11 ~Randomizer 0 4 1447 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1304 8 get_seed 0 4 1448 21 PerlinNoise::get_seed 0 1 602 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1305 12 ~PerlinNoise 0 4 1448 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1306 12 PerlinNoise2 0 4 1449 26 PerlinNoise2::PerlinNoise2 0 3 603 604 605 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
208
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1307 10 operator = 0 4 1449 24 PerlinNoise2::operator = 0 1 606 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1308 9 set_scale 0 4 1449 23 PerlinNoise2::set_scale 0 4 607 608 609 610 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1309 5 noise 0 4 1449 19 PerlinNoise2::noise 0 3 611 612 613 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1310 11 operator () 0 4 1449 25 PerlinNoise2::operator () 0 3 614 615 616 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1311 13 ~PerlinNoise2 0 4 1449 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1312 12 PerlinNoise3 0 4 1450 26 PerlinNoise3::PerlinNoise3 0 3 617 618 619 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
219
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1313 10 operator = 0 4 1450 24 PerlinNoise3::operator = 0 1 620 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1314 9 set_scale 0 4 1450 23 PerlinNoise3::set_scale 0 4 621 622 623 624 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1315 5 noise 0 4 1450 19 PerlinNoise3::noise 0 3 625 626 627 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1316 11 operator () 0 4 1450 25 PerlinNoise3::operator () 0 3 628 629 630 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1317 13 ~PerlinNoise3 0 4 1450 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1318 9 rotate_to 0 1 0 9 rotate_to 0 4 705 706 707 708 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1319 19 StackedPerlinNoise2 0 4 1507 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 631 632 633 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
314
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1320 10 operator = 0 4 1507 31 StackedPerlinNoise2::operator = 0 1 634 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1321 9 add_level 0 4 1507 30 StackedPerlinNoise2::add_level 0 1 635 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1322 5 clear 0 4 1507 26 StackedPerlinNoise2::clear 0 1 636 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1323 5 noise 0 4 1507 26 StackedPerlinNoise2::noise 0 3 637 638 639 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1324 11 operator () 0 4 1507 32 StackedPerlinNoise2::operator () 0 3 640 641 642 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1325 20 ~StackedPerlinNoise2 0 4 1507 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1326 19 StackedPerlinNoise3 0 4 1508 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 643 644 645 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
325
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1327 10 operator = 0 4 1508 31 StackedPerlinNoise3::operator = 0 1 646 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1328 9 add_level 0 4 1508 30 StackedPerlinNoise3::add_level 0 1 647 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1329 5 clear 0 4 1508 26 StackedPerlinNoise3::clear 0 1 648 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1330 5 noise 0 4 1508 26 StackedPerlinNoise3::noise 0 3 649 650 651 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1331 11 operator () 0 4 1508 32 StackedPerlinNoise3::operator () 0 3 652 653 654 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1332 20 ~StackedPerlinNoise3 0 4 1508 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1333 12 Triangulator 0 4 1509 26 Triangulator::Triangulator 0 2 655 656 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1334 5 clear 0 4 1509 19 Triangulator::clear 0 1 657 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1335 10 add_vertex 0 4 1509 24 Triangulator::add_vertex 0 2 658 659 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1336 16 get_num_vertices 0 4 1509 30 Triangulator::get_num_vertices 0 1 660 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1337 10 get_vertex 0 4 1509 24 Triangulator::get_vertex 0 1 661 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1338 13 clear_polygon 0 4 1509 27 Triangulator::clear_polygon 0 1 662 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1339 18 add_polygon_vertex 0 4 1509 32 Triangulator::add_polygon_vertex 0 1 663 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1340 15 is_left_winding 0 4 1509 29 Triangulator::is_left_winding 0 1 664 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1341 10 begin_hole 0 4 1509 24 Triangulator::begin_hole 0 1 665 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1342 15 add_hole_vertex 0 4 1509 29 Triangulator::add_hole_vertex 0 1 666 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1343 11 triangulate 0 4 1509 25 Triangulator::triangulate 0 1 667 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1344 17 get_num_triangles 0 4 1509 31 Triangulator::get_num_triangles 0 1 668 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1345 15 get_triangle_v0 0 4 1509 29 Triangulator::get_triangle_v0 0 1 669 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1346 15 get_triangle_v1 0 4 1509 29 Triangulator::get_triangle_v1 0 1 670 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1347 15 get_triangle_v2 0 4 1509 29 Triangulator::get_triangle_v2 0 1 671 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1348 13 ~Triangulator 0 4 1509 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1349 13 Triangulator3 0 4 1512 28 Triangulator3::Triangulator3 0 2 672 673 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1350 5 clear 0 4 1512 20 Triangulator3::clear 0 1 674 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1351 10 add_vertex 0 4 1512 25 Triangulator3::add_vertex 0 2 675 676 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1352 16 get_num_vertices 0 4 1512 31 Triangulator3::get_num_vertices 0 1 677 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1353 10 get_vertex 0 4 1512 25 Triangulator3::get_vertex 0 1 678 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1354 11 triangulate 0 4 1512 26 Triangulator3::triangulate 0 1 679 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1355 9 get_plane 0 4 1512 24 Triangulator3::get_plane 0 1 680 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1356 14 ~Triangulator3 0 4 1512 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

708
1 0 0 7 8 1518 722 0 0 1 4 copy 1 1516  
2 0 0 7 8 1518 722 0 0 1 4 copy 1 1519  
3 0 0 7 8 1518 722 0 0 1 6 source 1 1521  
4 0 0 6 9 1524 0 0 0 1 4 this 3 1516  
5 0 0 6 10 1525 0 0 0 2 4 this 3 1516  1 n 1 1524  
6 0 0 6 11 1525 0 0 0 2 4 this 3 1516  1 n 1 1524  
7 0 0 6 12 1528 0 0 0 1 4 this 3 1516  
8 0 0 6 13 1528 0 0 0 3 4 this 3 1516  1 n 1 1524  5 count 1 1524  
9 0 0 6 14 1529 0 0 0 1 4 this 3 1516  
10 0 0 6 15 1529 0 0 0 1 4 this 3 1516  
11 0 0 6 16 1529 0 0 0 3 4 this 3 1516  4 view 1 1530  5 flags 1 1529  
12 0 0 4 17 1533 0 0 0 2 4 this 3 1516  4 view 1 1530  
13 0 0 4 5 1533 0 0 0 1 4 this 3 1534  
14 0 0 4 6 1533 0 0 0 2 4 this 3 1535  3 out 1 1537  
15 0 0 7 25 1541 736 0 0 1 4 copy 1 1539  
16 0 0 7 25 1541 736 0 0 1 4 copy 1 1542  
17 0 0 7 25 1541 736 0 0 1 6 source 1 1521  
18 0 0 6 26 1524 0 0 0 1 4 this 3 1539  
19 0 0 6 27 1544 0 0 0 2 4 this 3 1539  1 n 1 1524  
20 0 0 6 28 1544 0 0 0 2 4 this 3 1539  1 n 1 1524  
21 0 0 6 29 1528 0 0 0 1 4 this 3 1539  
22 0 0 6 30 1528 0 0 0 3 4 this 3 1539  1 n 1 1524  5 count 1 1524  
23 0 0 6 31 1529 0 0 0 1 4 this 3 1539  
24 0 0 6 32 1529 0 0 0 1 4 this 3 1539  
25 0 0 6 33 1529 0 0 0 3 4 this 3 1539  4 view 1 1530  5 flags 1 1529  
26 0 0 4 34 1533 0 0 0 2 4 this 3 1539  4 view 1 1530  
27 0 0 4 22 1533 0 0 0 1 4 this 3 1547  
28 0 0 4 23 1533 0 0 0 2 4 this 3 1548  3 out 1 1537  
29 0 0 7 42 1552 750 0 0 1 4 copy 1 1550  
30 0 0 7 42 1552 750 0 0 1 4 copy 1 1553  
31 0 0 7 42 1552 750 0 0 1 6 source 1 1521  
32 0 0 6 43 1524 0 0 0 1 4 this 3 1550  
33 0 0 6 44 1555 0 0 0 2 4 this 3 1550  1 n 1 1524  
34 0 0 6 45 1555 0 0 0 2 4 this 3 1550  1 n 1 1524  
35 0 0 6 46 1528 0 0 0 1 4 this 3 1550  
36 0 0 6 47 1528 0 0 0 3 4 this 3 1550  1 n 1 1524  5 count 1 1524  
37 0 0 6 48 1529 0 0 0 1 4 this 3 1550  
38 0 0 6 49 1529 0 0 0 1 4 this 3 1550  
39 0 0 6 50 1529 0 0 0 3 4 this 3 1550  4 view 1 1530  5 flags 1 1529  
40 0 0 4 51 1533 0 0 0 2 4 this 3 1550  4 view 1 1530  
41 0 0 4 39 1533 0 0 0 1 4 this 3 1558  
42 0 0 4 40 1533 0 0 0 2 4 this 3 1559  3 out 1 1537  
43 0 0 7 59 1563 764 0 0 1 4 copy 1 1561  
44 0 0 7 59 1563 764 0 0 1 4 copy 1 1564  
45 0 0 7 59 1563 764 0 0 1 6 source 1 1521  
46 0 0 6 60 1524 0 0 0 1 4 this 3 1561  
47 0 0 6 61 1566 0 0 0 2 4 this 3 1561  1 n 1 1524  
48 0 0 6 62 1566 0 0 0 2 4 this 3 1561  1 n 1 1524  
49 0 0 6 63 1528 0 0 0 1 4 this 3 1561  
50 0 0 6 64 1528 0 0 0 3 4 this 3 1561  1 n 1 1524  5 count 1 1524  
51 0 0 6 65 1529 0 0 0 1 4 this 3 1561  
52 0 0 6 66 1529 0 0 0 1 4 this 3 1561  
53 0 0 6 67 1529 0 0 0 3 4 this 3 1561  4 view 1 1530  5 flags 1 1529  
54 0 0 4 68 1533 0 0 0 2 4 this 3 1561  4 view 1 1530  
55 0 0 4 56 1533 0 0 0 1 4 this 3 1569  
56 0 0 4 57 1533 0 0 0 2 4 this 3 1570  3 out 1 1537  
57 0 0 7 76 1574 778 0 0 1 4 copy 1 1572  
58 0 0 7 76 1574 778 0 0 1 4 copy 1 1575  
59 0 0 7 76 1574 778 0 0 1 6 source 1 1521  
60 0 0 6 77 1524 0 0 0 1 4 this 3 1572  
61 0 0 6 78 1577 0 0 0 2 4 this 3 1572  1 n 1 1524  
62 0 0 6 79 1577 0 0 0 2 4 this 3 1572  1 n 1 1524  
63 0 0 6 80 1528 0 0 0 1 4 this 3 1572  
64 0 0 6 81 1528 0 0 0 3 4 this 3 1572  1 n 1 1524  5 count 1 1524  
65 0 0 6 82 1529 0 0 0 1 4 this 3 1572  
66 0 0 6 83 1529 0 0 0 1 4 this 3 1572  
67 0 0 6 84 1529 0 0 0 3 4 this 3 1572  4 view 1 1530  5 flags 1 1529  
68 0 0 4 85 1533 0 0 0 2 4 this 3 1572  4 view 1 1530  
69 0 0 4 73 1533 0 0 0 1 4 this 3 1580  
70 0 0 4 74 1533 0 0 0 2 4 this 3 1581  3 out 1 1537  
71 0 0 7 93 1585 792 0 0 1 4 copy 1 1583  
72 0 0 7 93 1585 792 0 0 1 4 copy 1 1586  
73 0 0 7 93 1585 792 0 0 1 6 source 1 1521  
74 0 0 6 94 1524 0 0 0 1 4 this 3 1583  
75 0 0 6 95 1588 0 0 0 2 4 this 3 1583  1 n 1 1524  
76 0 0 6 96 1588 0 0 0 2 4 this 3 1583  1 n 1 1524  
77 0 0 6 97 1528 0 0 0 1 4 this 3 1583  
78 0 0 6 98 1528 0 0 0 3 4 this 3 1583  1 n 1 1524  5 count 1 1524  
79 0 0 6 99 1529 0 0 0 1 4 this 3 1583  
80 0 0 6 100 1529 0 0 0 1 4 this 3 1583  
81 0 0 6 101 1529 0 0 0 3 4 this 3 1583  4 view 1 1530  5 flags 1 1529  
82 0 0 4 102 1533 0 0 0 2 4 this 3 1583  4 view 1 1530  
83 0 0 4 90 1533 0 0 0 1 4 this 3 1591  
84 0 0 4 91 1533 0 0 0 2 4 this 3 1592  3 out 1 1537  
85 0 0 7 110 1596 806 0 0 1 4 copy 1 1594  
86 0 0 7 110 1596 806 0 0 1 4 copy 1 1597  
87 0 0 7 110 1596 806 0 0 1 6 source 1 1521  
88 0 0 6 111 1524 0 0 0 1 4 this 3 1594  
89 0 0 6 112 1599 0 0 0 2 4 this 3 1594  1 n 1 1524  
90 0 0 6 113 1599 0 0 0 2 4 this 3 1594  1 n 1 1524  
91 0 0 6 114 1528 0 0 0 1 4 this 3 1594  
92 0 0 6 115 1528 0 0 0 3 4 this 3 1594  1 n 1 1524  5 count 1 1524  
93 0 0 6 116 1529 0 0 0 1 4 this 3 1594  
94 0 0 6 117 1529 0 0 0 1 4 this 3 1594  
95 0 0 6 118 1529 0 0 0 3 4 this 3 1594  4 view 1 1530  5 flags 1 1529  
96 0 0 4 119 1533 0 0 0 2 4 this 3 1594  4 view 1 1530  
97 0 0 4 107 1533 0 0 0 1 4 this 3 1602  
98 0 0 4 108 1533 0 0 0 2 4 this 3 1603  3 out 1 1537  
99 0 0 7 127 1607 820 0 0 1 4 copy 1 1605  
100 0 0 7 127 1607 820 0 0 1 4 copy 1 1608  
101 0 0 7 127 1607 820 0 0 1 6 source 1 1521  
102 0 0 6 128 1524 0 0 0 1 4 this 3 1605  
103 0 0 6 129 1610 0 0 0 2 4 this 3 1605  1 n 1 1524  
104 0 0 6 130 1610 0 0 0 2 4 this 3 1605  1 n 1 1524  
105 0 0 6 131 1528 0 0 0 1 4 this 3 1605  
106 0 0 6 132 1528 0 0 0 3 4 this 3 1605  1 n 1 1524  5 count 1 1524  
107 0 0 6 133 1529 0 0 0 1 4 this 3 1605  
108 0 0 6 134 1529 0 0 0 1 4 this 3 1605  
109 0 0 6 135 1529 0 0 0 3 4 this 3 1605  4 view 1 1530  5 flags 1 1529  
110 0 0 4 136 1533 0 0 0 2 4 this 3 1605  4 view 1 1530  
111 0 0 4 124 1533 0 0 0 1 4 this 3 1613  
112 0 0 4 125 1533 0 0 0 2 4 this 3 1614  3 out 1 1537  
113 0 0 7 144 1618 834 0 0 1 4 copy 1 1616  
114 0 0 7 144 1618 834 0 0 1 4 copy 1 1619  
115 0 0 7 144 1618 834 0 0 1 6 source 1 1521  
116 0 0 6 145 1524 0 0 0 1 4 this 3 1616  
117 0 0 6 146 1621 0 0 0 2 4 this 3 1616  1 n 1 1524  
118 0 0 6 147 1621 0 0 0 2 4 this 3 1616  1 n 1 1524  
119 0 0 6 148 1528 0 0 0 1 4 this 3 1616  
120 0 0 6 149 1528 0 0 0 3 4 this 3 1616  1 n 1 1524  5 count 1 1524  
121 0 0 6 150 1529 0 0 0 1 4 this 3 1616  
122 0 0 6 151 1529 0 0 0 1 4 this 3 1616  
123 0 0 6 152 1529 0 0 0 3 4 this 3 1616  4 view 1 1530  5 flags 1 1529  
124 0 0 4 153 1533 0 0 0 2 4 this 3 1616  4 view 1 1530  
125 0 0 4 141 1533 0 0 0 1 4 this 3 1624  
126 0 0 4 142 1533 0 0 0 2 4 this 3 1625  3 out 1 1537  
127 0 0 7 161 1629 848 0 0 1 4 copy 1 1627  
128 0 0 7 161 1629 848 0 0 1 4 copy 1 1630  
129 0 0 7 161 1629 848 0 0 1 6 source 1 1521  
130 0 0 6 162 1524 0 0 0 1 4 this 3 1627  
131 0 0 6 163 1632 0 0 0 2 4 this 3 1627  1 n 1 1524  
132 0 0 6 164 1632 0 0 0 2 4 this 3 1627  1 n 1 1524  
133 0 0 6 165 1528 0 0 0 1 4 this 3 1627  
134 0 0 6 166 1528 0 0 0 3 4 this 3 1627  1 n 1 1524  5 count 1 1524  
135 0 0 6 167 1529 0 0 0 1 4 this 3 1627  
136 0 0 6 168 1529 0 0 0 1 4 this 3 1627  
137 0 0 6 169 1529 0 0 0 3 4 this 3 1627  4 view 1 1530  5 flags 1 1529  
138 0 0 4 170 1533 0 0 0 2 4 this 3 1627  4 view 1 1530  
139 0 0 4 158 1533 0 0 0 1 4 this 3 1635  
140 0 0 4 159 1533 0 0 0 2 4 this 3 1636  3 out 1 1537  
141 0 0 7 178 1640 862 0 0 1 4 copy 1 1638  
142 0 0 7 178 1640 862 0 0 1 4 copy 1 1641  
143 0 0 7 178 1640 862 0 0 1 6 source 1 1521  
144 0 0 6 179 1524 0 0 0 1 4 this 3 1638  
145 0 0 6 180 1643 0 0 0 2 4 this 3 1638  1 n 1 1524  
146 0 0 6 181 1643 0 0 0 2 4 this 3 1638  1 n 1 1524  
147 0 0 6 182 1528 0 0 0 1 4 this 3 1638  
148 0 0 6 183 1528 0 0 0 3 4 this 3 1638  1 n 1 1524  5 count 1 1524  
149 0 0 6 184 1529 0 0 0 1 4 this 3 1638  
150 0 0 6 185 1529 0 0 0 1 4 this 3 1638  
151 0 0 6 186 1529 0 0 0 3 4 this 3 1638  4 view 1 1530  5 flags 1 1529  
152 0 0 4 187 1533 0 0 0 2 4 this 3 1638  4 view 1 1530  
153 0 0 4 175 1533 0 0 0 1 4 this 3 1646  
154 0 0 4 176 1533 0 0 0 2 4 this 3 1647  3 out 1 1537  
155 0 0 7 195 1651 876 0 0 1 4 copy 1 1649  
156 0 0 7 195 1651 876 0 0 1 4 copy 1 1652  
157 0 0 7 195 1651 876 0 0 1 6 source 1 1521  
158 0 0 6 196 1524 0 0 0 1 4 this 3 1649  
159 0 0 6 197 1654 0 0 0 2 4 this 3 1649  1 n 1 1524  
160 0 0 6 198 1654 0 0 0 2 4 this 3 1649  1 n 1 1524  
161 0 0 6 199 1528 0 0 0 1 4 this 3 1649  
162 0 0 6 200 1528 0 0 0 3 4 this 3 1649  1 n 1 1524  5 count 1 1524  
163 0 0 6 201 1529 0 0 0 1 4 this 3 1649  
164 0 0 6 202 1529 0 0 0 1 4 this 3 1649  
165 0 0 6 203 1529 0 0 0 3 4 this 3 1649  4 view 1 1530  5 flags 1 1529  
166 0 0 4 204 1533 0 0 0 2 4 this 3 1649  4 view 1 1530  
167 0 0 4 192 1533 0 0 0 1 4 this 3 1657  
168 0 0 4 193 1533 0 0 0 2 4 this 3 1658  3 out 1 1537  
169 0 0 7 212 1662 890 0 0 1 4 copy 1 1660  
170 0 0 7 212 1662 890 0 0 1 4 copy 1 1663  
171 0 0 7 212 1662 890 0 0 1 6 source 1 1521  
172 0 0 6 213 1524 0 0 0 1 4 this 3 1660  
173 0 0 6 214 1665 0 0 0 2 4 this 3 1660  1 n 1 1524  
174 0 0 6 215 1665 0 0 0 2 4 this 3 1660  1 n 1 1524  
175 0 0 6 216 1528 0 0 0 1 4 this 3 1660  
176 0 0 6 217 1528 0 0 0 3 4 this 3 1660  1 n 1 1524  5 count 1 1524  
177 0 0 6 218 1529 0 0 0 1 4 this 3 1660  
178 0 0 6 219 1529 0 0 0 1 4 this 3 1660  
179 0 0 6 220 1529 0 0 0 3 4 this 3 1660  4 view 1 1530  5 flags 1 1529  
180 0 0 4 221 1533 0 0 0 2 4 this 3 1660  4 view 1 1530  
181 0 0 4 209 1533 0 0 0 1 4 this 3 1668  
182 0 0 4 210 1533 0 0 0 2 4 this 3 1669  3 out 1 1537  
183 0 0 7 224 1671 908 0 0 1 4 copy 1 1519  
184 0 0 7 224 1671 908 0 0 1 6 source 1 1521  
185 0 0 7 224 1671 908 0 0 1 11 type_handle 1 1672  
186 0 0 7 225 1671 908 0 0 2 1 n 1 1524  11 type_handle 1 1672  
187 0 0 6 226 1524 0 0 0 1 4 this 3 1519  
188 0 0 4 227 1533 0 0 0 2 4 this 3 1671  1 x 1 1525  
189 0 0 4 228 1533 0 0 0 1 4 this 3 1671  
190 0 0 6 229 1525 0 0 0 2 4 this 3 1519  1 n 1 1524  
191 0 0 4 230 1533 0 0 0 3 4 this 3 1671  1 n 1 1524  5 value 1 1525  
192 0 0 6 231 1525 0 0 0 2 4 this 3 1519  1 n 1 1524  
193 0 0 4 232 1533 0 0 0 3 4 this 3 1671  1 n 1 1524  5 value 1 1525  
194 0 0 6 233 1528 0 0 0 1 4 this 3 1519  
195 0 0 4 234 1533 0 0 0 2 4 this 3 1671  4 data 1 1528  
196 0 0 6 235 1528 0 0 0 3 4 this 3 1519  1 n 1 1524  5 count 1 1524  
197 0 0 4 236 1533 0 0 0 4 4 this 3 1671  1 n 1 1524  5 count 1 1524  4 data 1 1528  
198 0 0 6 237 1529 0 0 0 1 4 this 3 1519  
199 0 0 6 238 1529 0 0 0 1 4 this 3 1519  
200 0 0 6 239 1529 0 0 0 3 4 this 3 1671  4 view 1 1530  5 flags 1 1529  
201 0 0 4 240 1533 0 0 0 2 4 this 3 1519  4 view 1 1530  
202 0 0 7 243 1674 926 0 0 1 4 copy 1 1542  
203 0 0 7 243 1674 926 0 0 1 6 source 1 1521  
204 0 0 7 243 1674 926 0 0 1 11 type_handle 1 1672  
205 0 0 7 244 1674 926 0 0 2 1 n 1 1524  11 type_handle 1 1672  
206 0 0 6 245 1524 0 0 0 1 4 this 3 1542  
207 0 0 4 246 1533 0 0 0 2 4 this 3 1674  1 x 1 1544  
208 0 0 4 247 1533 0 0 0 1 4 this 3 1674  
209 0 0 6 248 1544 0 0 0 2 4 this 3 1542  1 n 1 1524  
210 0 0 4 249 1533 0 0 0 3 4 this 3 1674  1 n 1 1524  5 value 1 1544  
211 0 0 6 250 1544 0 0 0 2 4 this 3 1542  1 n 1 1524  
212 0 0 4 251 1533 0 0 0 3 4 this 3 1674  1 n 1 1524  5 value 1 1544  
213 0 0 6 252 1528 0 0 0 1 4 this 3 1542  
214 0 0 4 253 1533 0 0 0 2 4 this 3 1674  4 data 1 1528  
215 0 0 6 254 1528 0 0 0 3 4 this 3 1542  1 n 1 1524  5 count 1 1524  
216 0 0 4 255 1533 0 0 0 4 4 this 3 1674  1 n 1 1524  5 count 1 1524  4 data 1 1528  
217 0 0 6 256 1529 0 0 0 1 4 this 3 1542  
218 0 0 6 257 1529 0 0 0 1 4 this 3 1542  
219 0 0 6 258 1529 0 0 0 3 4 this 3 1674  4 view 1 1530  5 flags 1 1529  
220 0 0 4 259 1533 0 0 0 2 4 this 3 1542  4 view 1 1530  
221 0 0 7 262 1675 944 0 0 1 4 copy 1 1553  
222 0 0 7 262 1675 944 0 0 1 6 source 1 1521  
223 0 0 7 262 1675 944 0 0 1 11 type_handle 1 1672  
224 0 0 7 263 1675 944 0 0 2 1 n 1 1524  11 type_handle 1 1672  
225 0 0 6 264 1524 0 0 0 1 4 this 3 1553  
226 0 0 4 265 1533 0 0 0 2 4 this 3 1675  1 x 1 1555  
227 0 0 4 266 1533 0 0 0 1 4 this 3 1675  
228 0 0 6 267 1555 0 0 0 2 4 this 3 1553  1 n 1 1524  
229 0 0 4 268 1533 0 0 0 3 4 this 3 1675  1 n 1 1524  5 value 1 1555  
230 0 0 6 269 1555 0 0 0 2 4 this 3 1553  1 n 1 1524  
231 0 0 4 270 1533 0 0 0 3 4 this 3 1675  1 n 1 1524  5 value 1 1555  
232 0 0 6 271 1528 0 0 0 1 4 this 3 1553  
233 0 0 4 272 1533 0 0 0 2 4 this 3 1675  4 data 1 1528  
234 0 0 6 273 1528 0 0 0 3 4 this 3 1553  1 n 1 1524  5 count 1 1524  
235 0 0 4 274 1533 0 0 0 4 4 this 3 1675  1 n 1 1524  5 count 1 1524  4 data 1 1528  
236 0 0 6 275 1529 0 0 0 1 4 this 3 1553  
237 0 0 6 276 1529 0 0 0 1 4 this 3 1553  
238 0 0 6 277 1529 0 0 0 3 4 this 3 1675  4 view 1 1530  5 flags 1 1529  
239 0 0 4 278 1533 0 0 0 2 4 this 3 1553  4 view 1 1530  
240 0 0 7 281 1676 962 0 0 1 4 copy 1 1564  
241 0 0 7 281 1676 962 0 0 1 6 source 1 1521  
242 0 0 7 281 1676 962 0 0 1 11 type_handle 1 1672  
243 0 0 7 282 1676 962 0 0 2 1 n 1 1524  11 type_handle 1 1672  
244 0 0 6 283 1524 0 0 0 1 4 this 3 1564  
245 0 0 4 284 1533 0 0 0 2 4 this 3 1676  1 x 1 1566  
246 0 0 4 285 1533 0 0 0 1 4 this 3 1676  
247 0 0 6 286 1566 0 0 0 2 4 this 3 1564  1 n 1 1524  
248 0 0 4 287 1533 0 0 0 3 4 this 3 1676  1 n 1 1524  5 value 1 1566  
249 0 0 6 288 1566 0 0 0 2 4 this 3 1564  1 n 1 1524  
250 0 0 4 289 1533 0 0 0 3 4 this 3 1676  1 n 1 1524  5 value 1 1566  
251 0 0 6 290 1528 0 0 0 1 4 this 3 1564  
252 0 0 4 291 1533 0 0 0 2 4 this 3 1676  4 data 1 1528  
253 0 0 6 292 1528 0 0 0 3 4 this 3 1564  1 n 1 1524  5 count 1 1524  
254 0 0 4 293 1533 0 0 0 4 4 this 3 1676  1 n 1 1524  5 count 1 1524  4 data 1 1528  
255 0 0 6 294 1529 0 0 0 1 4 this 3 1564  
256 0 0 6 295 1529 0 0 0 1 4 this 3 1564  
257 0 0 6 296 1529 0 0 0 3 4 this 3 1676  4 view 1 1530  5 flags 1 1529  
258 0 0 4 297 1533 0 0 0 2 4 this 3 1564  4 view 1 1530  
259 0 0 7 300 1677 980 0 0 1 4 copy 1 1575  
260 0 0 7 300 1677 980 0 0 1 6 source 1 1521  
261 0 0 7 300 1677 980 0 0 1 11 type_handle 1 1672  
262 0 0 7 301 1677 980 0 0 2 1 n 1 1524  11 type_handle 1 1672  
263 0 0 6 302 1524 0 0 0 1 4 this 3 1575  
264 0 0 4 303 1533 0 0 0 2 4 this 3 1677  1 x 1 1577  
265 0 0 4 304 1533 0 0 0 1 4 this 3 1677  
266 0 0 6 305 1577 0 0 0 2 4 this 3 1575  1 n 1 1524  
267 0 0 4 306 1533 0 0 0 3 4 this 3 1677  1 n 1 1524  5 value 1 1577  
268 0 0 6 307 1577 0 0 0 2 4 this 3 1575  1 n 1 1524  
269 0 0 4 308 1533 0 0 0 3 4 this 3 1677  1 n 1 1524  5 value 1 1577  
270 0 0 6 309 1528 0 0 0 1 4 this 3 1575  
271 0 0 4 310 1533 0 0 0 2 4 this 3 1677  4 data 1 1528  
272 0 0 6 311 1528 0 0 0 3 4 this 3 1575  1 n 1 1524  5 count 1 1524  
273 0 0 4 312 1533 0 0 0 4 4 this 3 1677  1 n 1 1524  5 count 1 1524  4 data 1 1528  
274 0 0 6 313 1529 0 0 0 1 4 this 3 1575  
275 0 0 6 314 1529 0 0 0 1 4 this 3 1575  
276 0 0 6 315 1529 0 0 0 3 4 this 3 1677  4 view 1 1530  5 flags 1 1529  
277 0 0 4 316 1533 0 0 0 2 4 this 3 1575  4 view 1 1530  
278 0 0 7 319 1678 998 0 0 1 4 copy 1 1586  
279 0 0 7 319 1678 998 0 0 1 6 source 1 1521  
280 0 0 7 319 1678 998 0 0 1 11 type_handle 1 1672  
281 0 0 7 320 1678 998 0 0 2 1 n 1 1524  11 type_handle 1 1672  
282 0 0 6 321 1524 0 0 0 1 4 this 3 1586  
283 0 0 4 322 1533 0 0 0 2 4 this 3 1678  1 x 1 1588  
284 0 0 4 323 1533 0 0 0 1 4 this 3 1678  
285 0 0 6 324 1588 0 0 0 2 4 this 3 1586  1 n 1 1524  
286 0 0 4 325 1533 0 0 0 3 4 this 3 1678  1 n 1 1524  5 value 1 1588  
287 0 0 6 326 1588 0 0 0 2 4 this 3 1586  1 n 1 1524  
288 0 0 4 327 1533 0 0 0 3 4 this 3 1678  1 n 1 1524  5 value 1 1588  
289 0 0 6 328 1528 0 0 0 1 4 this 3 1586  
290 0 0 4 329 1533 0 0 0 2 4 this 3 1678  4 data 1 1528  
291 0 0 6 330 1528 0 0 0 3 4 this 3 1586  1 n 1 1524  5 count 1 1524  
292 0 0 4 331 1533 0 0 0 4 4 this 3 1678  1 n 1 1524  5 count 1 1524  4 data 1 1528  
293 0 0 6 332 1529 0 0 0 1 4 this 3 1586  
294 0 0 6 333 1529 0 0 0 1 4 this 3 1586  
295 0 0 6 334 1529 0 0 0 3 4 this 3 1678  4 view 1 1530  5 flags 1 1529  
296 0 0 4 335 1533 0 0 0 2 4 this 3 1586  4 view 1 1530  
297 0 0 7 338 1679 1016 0 0 1 4 copy 1 1597  
298 0 0 7 338 1679 1016 0 0 1 6 source 1 1521  
299 0 0 7 338 1679 1016 0 0 1 11 type_handle 1 1672  
300 0 0 7 339 1679 1016 0 0 2 1 n 1 1524  11 type_handle 1 1672  
301 0 0 6 340 1524 0 0 0 1 4 this 3 1597  
302 0 0 4 341 1533 0 0 0 2 4 this 3 1679  1 x 1 1599  
303 0 0 4 342 1533 0 0 0 1 4 this 3 1679  
304 0 0 6 343 1599 0 0 0 2 4 this 3 1597  1 n 1 1524  
305 0 0 4 344 1533 0 0 0 3 4 this 3 1679  1 n 1 1524  5 value 1 1599  
306 0 0 6 345 1599 0 0 0 2 4 this 3 1597  1 n 1 1524  
307 0 0 4 346 1533 0 0 0 3 4 this 3 1679  1 n 1 1524  5 value 1 1599  
308 0 0 6 347 1528 0 0 0 1 4 this 3 1597  
309 0 0 4 348 1533 0 0 0 2 4 this 3 1679  4 data 1 1528  
310 0 0 6 349 1528 0 0 0 3 4 this 3 1597  1 n 1 1524  5 count 1 1524  
311 0 0 4 350 1533 0 0 0 4 4 this 3 1679  1 n 1 1524  5 count 1 1524  4 data 1 1528  
312 0 0 6 351 1529 0 0 0 1 4 this 3 1597  
313 0 0 6 352 1529 0 0 0 1 4 this 3 1597  
314 0 0 6 353 1529 0 0 0 3 4 this 3 1679  4 view 1 1530  5 flags 1 1529  
315 0 0 4 354 1533 0 0 0 2 4 this 3 1597  4 view 1 1530  
316 0 0 7 357 1680 1034 0 0 1 4 copy 1 1608  
317 0 0 7 357 1680 1034 0 0 1 6 source 1 1521  
318 0 0 7 357 1680 1034 0 0 1 11 type_handle 1 1672  
319 0 0 7 358 1680 1034 0 0 2 1 n 1 1524  11 type_handle 1 1672  
320 0 0 6 359 1524 0 0 0 1 4 this 3 1608  
321 0 0 4 360 1533 0 0 0 2 4 this 3 1680  1 x 1 1610  
322 0 0 4 361 1533 0 0 0 1 4 this 3 1680  
323 0 0 6 362 1610 0 0 0 2 4 this 3 1608  1 n 1 1524  
324 0 0 4 363 1533 0 0 0 3 4 this 3 1680  1 n 1 1524  5 value 1 1610  
325 0 0 6 364 1610 0 0 0 2 4 this 3 1608  1 n 1 1524  
326 0 0 4 365 1533 0 0 0 3 4 this 3 1680  1 n 1 1524  5 value 1 1610  
327 0 0 6 366 1528 0 0 0 1 4 this 3 1608  
328 0 0 4 367 1533 0 0 0 2 4 this 3 1680  4 data 1 1528  
329 0 0 6 368 1528 0 0 0 3 4 this 3 1608  1 n 1 1524  5 count 1 1524  
330 0 0 4 369 1533 0 0 0 4 4 this 3 1680  1 n 1 1524  5 count 1 1524  4 data 1 1528  
331 0 0 6 370 1529 0 0 0 1 4 this 3 1608  
332 0 0 6 371 1529 0 0 0 1 4 this 3 1608  
333 0 0 6 372 1529 0 0 0 3 4 this 3 1680  4 view 1 1530  5 flags 1 1529  
334 0 0 4 373 1533 0 0 0 2 4 this 3 1608  4 view 1 1530  
335 0 0 7 376 1681 1052 0 0 1 4 copy 1 1619  
336 0 0 7 376 1681 1052 0 0 1 6 source 1 1521  
337 0 0 7 376 1681 1052 0 0 1 11 type_handle 1 1672  
338 0 0 7 377 1681 1052 0 0 2 1 n 1 1524  11 type_handle 1 1672  
339 0 0 6 378 1524 0 0 0 1 4 this 3 1619  
340 0 0 4 379 1533 0 0 0 2 4 this 3 1681  1 x 1 1621  
341 0 0 4 380 1533 0 0 0 1 4 this 3 1681  
342 0 0 6 381 1621 0 0 0 2 4 this 3 1619  1 n 1 1524  
343 0 0 4 382 1533 0 0 0 3 4 this 3 1681  1 n 1 1524  5 value 1 1621  
344 0 0 6 383 1621 0 0 0 2 4 this 3 1619  1 n 1 1524  
345 0 0 4 384 1533 0 0 0 3 4 this 3 1681  1 n 1 1524  5 value 1 1621  
346 0 0 6 385 1528 0 0 0 1 4 this 3 1619  
347 0 0 4 386 1533 0 0 0 2 4 this 3 1681  4 data 1 1528  
348 0 0 6 387 1528 0 0 0 3 4 this 3 1619  1 n 1 1524  5 count 1 1524  
349 0 0 4 388 1533 0 0 0 4 4 this 3 1681  1 n 1 1524  5 count 1 1524  4 data 1 1528  
350 0 0 6 389 1529 0 0 0 1 4 this 3 1619  
351 0 0 6 390 1529 0 0 0 1 4 this 3 1619  
352 0 0 6 391 1529 0 0 0 3 4 this 3 1681  4 view 1 1530  5 flags 1 1529  
353 0 0 4 392 1533 0 0 0 2 4 this 3 1619  4 view 1 1530  
354 0 0 7 395 1682 1070 0 0 1 4 copy 1 1630  
355 0 0 7 395 1682 1070 0 0 1 6 source 1 1521  
356 0 0 7 395 1682 1070 0 0 1 11 type_handle 1 1672  
357 0 0 7 396 1682 1070 0 0 2 1 n 1 1524  11 type_handle 1 1672  
358 0 0 6 397 1524 0 0 0 1 4 this 3 1630  
359 0 0 4 398 1533 0 0 0 2 4 this 3 1682  1 x 1 1632  
360 0 0 4 399 1533 0 0 0 1 4 this 3 1682  
361 0 0 6 400 1632 0 0 0 2 4 this 3 1630  1 n 1 1524  
362 0 0 4 401 1533 0 0 0 3 4 this 3 1682  1 n 1 1524  5 value 1 1632  
363 0 0 6 402 1632 0 0 0 2 4 this 3 1630  1 n 1 1524  
364 0 0 4 403 1533 0 0 0 3 4 this 3 1682  1 n 1 1524  5 value 1 1632  
365 0 0 6 404 1528 0 0 0 1 4 this 3 1630  
366 0 0 4 405 1533 0 0 0 2 4 this 3 1682  4 data 1 1528  
367 0 0 6 406 1528 0 0 0 3 4 this 3 1630  1 n 1 1524  5 count 1 1524  
368 0 0 4 407 1533 0 0 0 4 4 this 3 1682  1 n 1 1524  5 count 1 1524  4 data 1 1528  
369 0 0 6 408 1529 0 0 0 1 4 this 3 1630  
370 0 0 6 409 1529 0 0 0 1 4 this 3 1630  
371 0 0 6 410 1529 0 0 0 3 4 this 3 1682  4 view 1 1530  5 flags 1 1529  
372 0 0 4 411 1533 0 0 0 2 4 this 3 1630  4 view 1 1530  
373 0 0 7 414 1683 1088 0 0 1 4 copy 1 1641  
374 0 0 7 414 1683 1088 0 0 1 6 source 1 1521  
375 0 0 7 414 1683 1088 0 0 1 11 type_handle 1 1672  
376 0 0 7 415 1683 1088 0 0 2 1 n 1 1524  11 type_handle 1 1672  
377 0 0 6 416 1524 0 0 0 1 4 this 3 1641  
378 0 0 4 417 1533 0 0 0 2 4 this 3 1683  1 x 1 1643  
379 0 0 4 418 1533 0 0 0 1 4 this 3 1683  
380 0 0 6 419 1643 0 0 0 2 4 this 3 1641  1 n 1 1524  
381 0 0 4 420 1533 0 0 0 3 4 this 3 1683  1 n 1 1524  5 value 1 1643  
382 0 0 6 421 1643 0 0 0 2 4 this 3 1641  1 n 1 1524  
383 0 0 4 422 1533 0 0 0 3 4 this 3 1683  1 n 1 1524  5 value 1 1643  
384 0 0 6 423 1528 0 0 0 1 4 this 3 1641  
385 0 0 4 424 1533 0 0 0 2 4 this 3 1683  4 data 1 1528  
386 0 0 6 425 1528 0 0 0 3 4 this 3 1641  1 n 1 1524  5 count 1 1524  
387 0 0 4 426 1533 0 0 0 4 4 this 3 1683  1 n 1 1524  5 count 1 1524  4 data 1 1528  
388 0 0 6 427 1529 0 0 0 1 4 this 3 1641  
389 0 0 6 428 1529 0 0 0 1 4 this 3 1641  
390 0 0 6 429 1529 0 0 0 3 4 this 3 1683  4 view 1 1530  5 flags 1 1529  
391 0 0 4 430 1533 0 0 0 2 4 this 3 1641  4 view 1 1530  
392 0 0 7 433 1684 1106 0 0 1 4 copy 1 1652  
393 0 0 7 433 1684 1106 0 0 1 6 source 1 1521  
394 0 0 7 433 1684 1106 0 0 1 11 type_handle 1 1672  
395 0 0 7 434 1684 1106 0 0 2 1 n 1 1524  11 type_handle 1 1672  
396 0 0 6 435 1524 0 0 0 1 4 this 3 1652  
397 0 0 4 436 1533 0 0 0 2 4 this 3 1684  1 x 1 1654  
398 0 0 4 437 1533 0 0 0 1 4 this 3 1684  
399 0 0 6 438 1654 0 0 0 2 4 this 3 1652  1 n 1 1524  
400 0 0 4 439 1533 0 0 0 3 4 this 3 1684  1 n 1 1524  5 value 1 1654  
401 0 0 6 440 1654 0 0 0 2 4 this 3 1652  1 n 1 1524  
402 0 0 4 441 1533 0 0 0 3 4 this 3 1684  1 n 1 1524  5 value 1 1654  
403 0 0 6 442 1528 0 0 0 1 4 this 3 1652  
404 0 0 4 443 1533 0 0 0 2 4 this 3 1684  4 data 1 1528  
405 0 0 6 444 1528 0 0 0 3 4 this 3 1652  1 n 1 1524  5 count 1 1524  
406 0 0 4 445 1533 0 0 0 4 4 this 3 1684  1 n 1 1524  5 count 1 1524  4 data 1 1528  
407 0 0 6 446 1529 0 0 0 1 4 this 3 1652  
408 0 0 6 447 1529 0 0 0 1 4 this 3 1652  
409 0 0 6 448 1529 0 0 0 3 4 this 3 1684  4 view 1 1530  5 flags 1 1529  
410 0 0 4 449 1533 0 0 0 2 4 this 3 1652  4 view 1 1530  
411 0 0 7 452 1685 1124 0 0 1 4 copy 1 1663  
412 0 0 7 452 1685 1124 0 0 1 6 source 1 1521  
413 0 0 7 452 1685 1124 0 0 1 11 type_handle 1 1672  
414 0 0 7 453 1685 1124 0 0 2 1 n 1 1524  11 type_handle 1 1672  
415 0 0 6 454 1524 0 0 0 1 4 this 3 1663  
416 0 0 4 455 1533 0 0 0 2 4 this 3 1685  1 x 1 1665  
417 0 0 4 456 1533 0 0 0 1 4 this 3 1685  
418 0 0 6 457 1665 0 0 0 2 4 this 3 1663  1 n 1 1524  
419 0 0 4 458 1533 0 0 0 3 4 this 3 1685  1 n 1 1524  5 value 1 1665  
420 0 0 6 459 1665 0 0 0 2 4 this 3 1663  1 n 1 1524  
421 0 0 4 460 1533 0 0 0 3 4 this 3 1685  1 n 1 1524  5 value 1 1665  
422 0 0 6 461 1528 0 0 0 1 4 this 3 1663  
423 0 0 4 462 1533 0 0 0 2 4 this 3 1685  4 data 1 1528  
424 0 0 6 463 1528 0 0 0 3 4 this 3 1663  1 n 1 1524  5 count 1 1524  
425 0 0 4 464 1533 0 0 0 4 4 this 3 1685  1 n 1 1524  5 count 1 1524  4 data 1 1528  
426 0 0 6 465 1529 0 0 0 1 4 this 3 1663  
427 0 0 6 466 1529 0 0 0 1 4 this 3 1663  
428 0 0 6 467 1529 0 0 0 3 4 this 3 1685  4 view 1 1530  5 flags 1 1529  
429 0 0 4 468 1533 0 0 0 2 4 this 3 1663  4 view 1 1530  
430 0 0 7 472 1688 1134 0 0 1 4 this 3 1686  
431 0 0 6 473 1689 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1686  
432 0 0 6 474 1689 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1686  
433 0 0 4 475 1533 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1688  
434 0 0 6 476 1689 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1688  3 vol 1 1686  
435 0 0 6 478 1529 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1686  3 vol 1 1686  
436 0 0 4 479 1533 0 0 0 2 4 this 3 1686  3 out 1 1537  
437 0 0 4 480 1533 0 0 10 /**
 *
 */ 3 4 this 3 1686  3 out 1 1537  12 indent_level 1 1529  
438 0 0 7 482 1672 0 0 0 0 
439 0 0 6 485 1689 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1690  3 vol 1 1441  
440 0 0 6 485 1689 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1690  5 point 1 1691  
441 0 0 6 486 1529 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1441  3 vol 1 1441  
442 0 0 6 486 1529 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1441  5 point 1 1691  
443 0 0 6 486 1529 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1441  1 a 1 1691  1 b 1 1691  
444 0 0 7 487 1693 0 0 0 1 4 this 3 1441  
445 0 0 4 488 1533 0 0 0 2 4 this 3 1690  3 mat 1 1694  
446 0 0 7 489 1672 0 0 0 0 
447 0 0 7 492 1693 0 0 0 1 4 this 3 1698  
448 0 0 7 493 1693 0 0 0 1 4 this 3 1698  
449 0 0 6 494 1700 0 0 10 /**
 *
 */ 1 4 this 3 1698  
450 0 0 7 495 1672 0 0 0 0 
451 0 0 7 498 1702 1148 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
452 0 0 7 498 1702 1148 0 10 /**
 *
 */ 1 4 copy 1 1703  
453 0 0 7 498 1702 1148 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1599  1 b 1 1599  1 c 1 1599  
454 0 0 6 499 1702 0 0 0 2 4 this 3 1702  4 copy 1 1703  
455 0 0 4 501 1533 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1702  3 mat 1 1705  
456 0 0 6 502 1599 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1703  
457 0 0 6 503 1599 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1703  
458 0 0 6 504 1599 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1703  
459 0 0 7 505 1707 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1703  1 t 1 1701  
460 0 0 4 506 1533 0 0 10 /**
 *
 */ 2 4 this 3 1703  3 out 1 1537  
461 0 0 4 507 1533 0 0 10 /**
 *
 */ 3 4 this 3 1703  3 out 1 1537  12 indent_level 1 1529  
462 0 0 4 508 1533 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1703  11 destination 1 1708  
463 0 0 4 509 1533 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1702  6 source 1 1710  
464 0 0 4 510 1533 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1703  11 destination 1 1708  
465 0 0 4 511 1533 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1702  6 source 1 1710  
466 0 0 7 513 1712 1162 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
467 0 0 7 513 1712 1162 0 10 /**
 *
 */ 1 4 copy 1 1713  
468 0 0 7 513 1712 1162 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1588  1 b 1 1588  1 c 1 1588  
469 0 0 6 514 1712 0 0 0 2 4 this 3 1712  4 copy 1 1713  
470 0 0 4 516 1533 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1712  3 mat 1 1715  
471 0 0 6 517 1588 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1713  
472 0 0 6 518 1588 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1713  
473 0 0 6 519 1588 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1713  
474 0 0 7 520 1719 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1713  1 t 1 1718  
475 0 0 4 521 1533 0 0 10 /**
 *
 */ 2 4 this 3 1713  3 out 1 1537  
476 0 0 4 522 1533 0 0 10 /**
 *
 */ 3 4 this 3 1713  3 out 1 1537  12 indent_level 1 1529  
477 0 0 4 523 1533 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1713  11 destination 1 1708  
478 0 0 4 524 1533 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1712  6 source 1 1710  
479 0 0 4 525 1533 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1713  11 destination 1 1708  
480 0 0 4 526 1533 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1712  6 source 1 1710  
481 0 0 7 530 1720 1190 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
482 0 0 7 530 1720 1190 0 0 1 6 param0 0 1721  
483 0 0 7 530 1720 1190 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1723  1 b 1 1723  1 c 1 1723  
484 0 0 7 530 1720 1190 0 10 /**
 *
 */ 1 4 copy 1 1725  
485 0 0 7 530 1720 1190 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1727  5 point 1 1723  
486 0 0 7 530 1720 1190 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1701  1 b 1 1701  1 c 1 1701  1 d 1 1701  
487 0 0 7 531 1720 1190 0 0 2 4 this 3 1721  3 mat 1 1544  
488 0 0 7 531 1720 1190 0 0 2 4 this 3 1721  3 mat 1 1705  
489 0 0 6 532 1720 0 0 0 2 4 this 3 1720  3 mat 1 1705  
490 0 0 4 533 1533 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1720  3 mat 1 1705  
491 0 0 7 534 1720 1190 0 0 1 4 this 3 1721  
492 0 0 7 535 1730 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1721  
493 0 0 7 536 1731 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1721  
494 0 0 7 537 1707 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1721  
495 0 0 6 538 1701 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1721  5 point 1 1723  
496 0 0 7 539 1707 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1721  5 point 1 1723  
497 0 0 4 540 1533 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1720  
498 0 0 6 541 1689 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1721  18 intersection_point 1 1707  2 p1 1 1723  2 p2 1 1723  
499 0 0 6 542 1689 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1721  4 from 1 1707  5 delta 1 1731  5 other 1 1721  
500 0 0 4 544 1533 0 0 10 /**
 *
 */ 2 4 this 3 1721  3 out 1 1537  
501 0 0 4 545 1533 0 0 10 /**
 *
 */ 3 4 this 3 1721  3 out 1 1537  12 indent_level 1 1529  
502 0 0 7 549 1732 1207 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
503 0 0 7 549 1732 1207 0 0 1 6 param0 0 1733  
504 0 0 7 549 1732 1207 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1734  1 b 1 1734  1 c 1 1734  
505 0 0 7 549 1732 1207 0 10 /**
 *
 */ 1 4 copy 1 1735  
506 0 0 7 549 1732 1207 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1737  5 point 1 1734  
507 0 0 7 549 1732 1207 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1718  1 b 1 1718  1 c 1 1718  1 d 1 1718  
508 0 0 7 550 1732 1207 0 0 2 4 this 3 1733  3 mat 1 1525  
509 0 0 7 550 1732 1207 0 0 2 4 this 3 1733  3 mat 1 1715  
510 0 0 6 551 1732 0 0 0 2 4 this 3 1732  3 mat 1 1715  
511 0 0 4 552 1533 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1732  3 mat 1 1715  
512 0 0 7 553 1732 1207 0 0 1 4 this 3 1733  
513 0 0 7 554 1740 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1733  
514 0 0 7 555 1741 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1733  
515 0 0 7 556 1719 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1733  
516 0 0 6 557 1718 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1733  5 point 1 1734  
517 0 0 7 558 1719 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1733  5 point 1 1734  
518 0 0 4 559 1533 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1732  
519 0 0 6 560 1689 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1733  18 intersection_point 1 1719  2 p1 1 1734  2 p2 1 1734  
520 0 0 6 561 1689 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1733  4 from 1 1719  5 delta 1 1741  5 other 1 1733  
521 0 0 4 563 1533 0 0 10 /**
 *
 */ 2 4 this 3 1733  3 out 1 1537  
522 0 0 4 564 1533 0 0 10 /**
 *
 */ 3 4 this 3 1733  3 out 1 1537  12 indent_level 1 1529  
523 0 0 7 571 1742 1218 0 42 /**
 * Constructs an empty box object.
 */ 0 
524 0 0 7 571 1742 1218 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1691  3 max 1 1691  
525 0 0 4 572 1533 0 0 0 2 4 this 3 1742  4 size 1 1743  
526 0 0 6 575 1529 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1744  
527 0 0 7 576 1693 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1744  1 n 1 1529  
528 0 0 6 578 1529 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1744  
529 0 0 7 579 1746 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1744  1 n 1 1529  
530 0 0 4 585 1533 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1742  3 min 1 1691  3 max 1 1691  
531 0 0 7 586 1672 0 0 0 0 
532 0 0 7 589 1747 1226 0 10 /**
 *
 */ 0 
533 0 0 7 589 1747 1226 0 0 1 6 param0 0 1748  
534 0 0 4 590 1533 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1747  
535 0 0 4 590 1533 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1747  1 l 1 1701  1 r 1 1701  1 t 1 1701  1 b 1 1701  
536 0 0 4 591 1533 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1747  5 fnear 1 1701  4 ffar 1 1701  
537 0 0 4 591 1533 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1747  5 fnear 1 1701  4 ffar 1 1701  1 l 1 1701  1 r 1 1701  1 t 1 1701  1 b 1 1701  
538 0 0 4 592 1533 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1747  4 xfov 1 1701  6 aspect 1 1701  5 fnear 1 1701  4 ffar 1 1701  
539 0 0 4 593 1533 0 0 0 5 4 this 3 1747  4 yfov 1 1701  6 aspect 1 1701  5 fnear 1 1701  4 ffar 1 1701  
540 0 0 4 594 1533 0 0 0 5 4 this 3 1747  4 xfov 1 1701  4 yfov 1 1701  5 fnear 1 1701  4 ffar 1 1701  
541 0 0 7 598 1750 1234 0 10 /**
 *
 */ 0 
542 0 0 7 598 1750 1234 0 0 1 6 param0 0 1751  
543 0 0 4 599 1533 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1750  
544 0 0 4 599 1533 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1750  1 l 1 1718  1 r 1 1718  1 t 1 1718  1 b 1 1718  
545 0 0 4 600 1533 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1750  5 fnear 1 1718  4 ffar 1 1718  
546 0 0 4 600 1533 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1750  5 fnear 1 1718  4 ffar 1 1718  1 l 1 1718  1 r 1 1718  1 t 1 1718  1 b 1 1718  
547 0 0 4 601 1533 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1750  4 xfov 1 1718  6 aspect 1 1718  5 fnear 1 1718  4 ffar 1 1718  
548 0 0 4 602 1533 0 0 0 5 4 this 3 1750  4 yfov 1 1718  6 aspect 1 1718  5 fnear 1 1718  4 ffar 1 1718  
549 0 0 4 603 1533 0 0 0 5 4 this 3 1750  4 xfov 1 1718  4 yfov 1 1718  5 fnear 1 1718  4 ffar 1 1718  
550 0 0 7 611 1756 1241 0 10 /**
 *
 */ 3 7 frustum 1 1753  8 is_ortho 1 1689  2 cs 1 1755  
551 0 0 7 611 1756 1241 0 10 /**
 *
 */ 8 3 fll 1 1691  3 flr 1 1691  3 fur 1 1691  3 ful 1 1691  3 nll 1 1691  3 nlr 1 1691  3 nur 1 1691  3 nul 1 1691  
552 0 0 6 612 1529 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1757  
553 0 0 7 613 1693 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1757  1 n 1 1529  
554 0 0 6 615 1529 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1757  
555 0 0 7 616 1746 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1757  1 n 1 1529  
556 0 0 7 620 1672 0 0 0 0 
557 0 0 7 623 1759 1249 0 10 /**
 *
 */ 2 1 a 1 1691  1 b 1 1691  
558 0 0 4 624 1533 0 0 0 2 4 this 3 1759  4 size 1 1743  
559 0 0 6 627 1691 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1760  
560 0 0 7 628 1693 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1760  
561 0 0 7 629 1672 0 0 0 0 
562 0 0 7 632 1762 1256 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
563 0 0 7 632 1762 1256 0 10 /**
 *
 */ 1 5 plane 1 1763  
564 0 0 4 633 1533 0 0 0 2 4 this 3 1762  4 size 1 1743  
565 0 0 6 636 1763 0 0 10 /**
 *
 */ 1 4 this 3 1765  
566 0 0 7 637 1672 0 0 0 0 
567 0 0 7 640 1767 1266 0 38 /**
 * Constructs an empty sphere.
 */ 0 
568 0 0 7 640 1767 1266 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1691  6 radius 1 1700  
569 0 0 4 641 1533 0 0 0 2 4 this 3 1767  4 size 1 1743  
570 0 0 7 644 1693 0 0 10 /**
 *
 */ 1 4 this 3 1768  
571 0 0 6 645 1700 0 0 10 /**
 *
 */ 1 4 this 3 1768  
572 0 0 4 646 1533 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 1767  6 center 1 1691  
573 0 0 4 647 1533 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 1767  6 radius 1 1700  
574 0 0 7 648 1672 0 0 0 0 
575 0 0 7 651 1770 1276 0 44 /**
 * Constructs an empty intersection.
 */ 0 
576 0 0 4 652 1533 0 0 0 2 4 this 3 1770  4 size 1 1743  
577 0 0 6 655 1529 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 1771  
578 0 0 7 656 1441 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 1771  1 n 1 1529  
579 0 0 4 661 1533 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1770  
580 0 0 4 662 1533 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1770  9 component 1 1441  
581 0 0 7 663 1672 0 0 0 0 
582 0 0 7 668 1773 1281 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1524  
583 0 0 6 669 1524 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1773  
584 0 0 7 673 1774 1284 0 10 /**
 *
 */ 0 
585 0 0 7 674 1672 0 0 0 0 
586 0 0 7 677 1775 1295 0 37 /**
 * Constructs an empty union.
 */ 0 
587 0 0 4 678 1533 0 0 0 2 4 this 3 1775  4 size 1 1743  
588 0 0 6 681 1529 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 1776  
589 0 0 7 682 1441 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 1776  1 n 1 1529  
590 0 0 4 685 1533 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1775  
591 0 0 4 686 1533 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1775  9 component 1 1441  
592 0 0 4 687 1533 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 1775  6 volume 1 1686  
593 0 0 7 688 1672 0 0 0 0 
594 0 0 7 691 1780 1303 0 10 /**
 *
 */ 1 4 copy 1 1778  
595 0 0 7 691 1780 1303 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 1 1524  
596 0 0 6 692 1780 0 0 0 2 4 this 3 1780  4 copy 1 1778  
597 0 0 6 693 1529 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 1780  5 range 1 1529  
598 0 0 6 694 1718 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 1780  5 range 1 1718  
599 0 0 6 695 1718 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 1780  
600 0 0 6 696 1524 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
601 0 0 6 697 1524 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 1780  
602 0 0 6 700 1524 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 1781  
603 0 0 7 703 1782 1311 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
604 0 0 7 703 1782 1311 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1783  
605 0 0 7 703 1782 1311 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1718  2 sy 1 1718  10 table_size 1 1529  4 seed 1 1524  
606 0 0 6 704 1782 0 0 0 2 4 this 3 1782  4 copy 1 1783  
607 0 0 4 705 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1782  5 scale 1 1555  
608 0 0 4 705 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1782  5 scale 1 1566  
609 0 0 4 705 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1782  5 scale 1 1718  
610 0 0 4 705 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 1782  2 sx 1 1718  2 sy 1 1718  
611 0 0 6 706 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1783  5 value 1 1555  
612 0 0 6 706 1701 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1783  5 value 1 1566  
613 0 0 6 706 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1783  1 x 1 1718  1 y 1 1718  
614 0 0 6 707 1718 0 0 0 2 4 this 3 1783  5 value 1 1555  
615 0 0 6 707 1701 0 0 0 2 4 this 3 1783  5 value 1 1566  
616 0 0 6 707 1718 0 0 0 3 4 this 3 1783  1 x 1 1718  1 y 1 1718  
617 0 0 7 710 1785 1317 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
618 0 0 7 710 1785 1317 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1786  
619 0 0 7 710 1785 1317 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1718  2 sy 1 1718  2 sz 1 1718  10 table_size 1 1529  4 seed 1 1524  
620 0 0 6 711 1785 0 0 0 2 4 this 3 1785  4 copy 1 1786  
621 0 0 4 712 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1785  5 scale 1 1588  
622 0 0 4 712 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1785  5 scale 1 1599  
623 0 0 4 712 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1785  5 scale 1 1718  
624 0 0 4 712 1533 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 1785  2 sx 1 1718  2 sy 1 1718  2 sz 1 1718  
625 0 0 6 713 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1786  5 value 1 1588  
626 0 0 6 713 1701 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1786  5 value 1 1599  
627 0 0 6 713 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1786  1 x 1 1718  1 y 1 1718  1 z 1 1718  
628 0 0 6 714 1718 0 0 0 2 4 this 3 1786  5 value 1 1588  
629 0 0 6 714 1701 0 0 0 2 4 this 3 1786  5 value 1 1599  
630 0 0 6 714 1718 0 0 0 4 4 this 3 1786  1 x 1 1718  1 y 1 1718  1 z 1 1718  
631 0 0 7 774 1788 1325 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
632 0 0 7 774 1788 1325 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 1789  
633 0 0 7 774 1788 1325 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1718  2 sy 1 1718  10 num_levels 1 1529  12 scale_factor 1 1718  9 amp_scale 1 1718  10 table_size 1 1529  4 seed 1 1524  
634 0 0 6 775 1788 0 0 0 2 4 this 3 1788  4 copy 1 1789  
635 0 0 4 776 1533 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1788  5 level 1 1783  3 amp 1 1718  
636 0 0 4 777 1533 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1788  
637 0 0 6 778 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1788  5 value 1 1555  
638 0 0 6 778 1701 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1788  5 value 1 1566  
639 0 0 6 778 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1788  1 x 1 1718  1 y 1 1718  
640 0 0 6 779 1718 0 0 0 2 4 this 3 1788  5 value 1 1555  
641 0 0 6 779 1701 0 0 0 2 4 this 3 1788  5 value 1 1566  
642 0 0 6 779 1718 0 0 0 3 4 this 3 1788  1 x 1 1718  1 y 1 1718  
643 0 0 7 782 1791 1332 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
644 0 0 7 782 1791 1332 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 1792  
645 0 0 7 782 1791 1332 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1718  2 sy 1 1718  2 sz 1 1718  10 num_levels 1 1529  12 scale_factor 1 1718  9 amp_scale 1 1718  10 table_size 1 1529  4 seed 1 1524  
646 0 0 6 783 1791 0 0 0 2 4 this 3 1791  4 copy 1 1792  
647 0 0 4 784 1533 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1791  5 level 1 1786  3 amp 1 1718  
648 0 0 4 785 1533 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1791  
649 0 0 6 786 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1791  5 value 1 1588  
650 0 0 6 786 1701 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1791  5 value 1 1599  
651 0 0 6 786 1718 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1791  1 x 1 1718  1 y 1 1718  1 z 1 1718  
652 0 0 6 787 1718 0 0 0 2 4 this 3 1791  5 value 1 1588  
653 0 0 6 787 1701 0 0 0 2 4 this 3 1791  5 value 1 1599  
654 0 0 6 787 1718 0 0 0 4 4 this 3 1791  1 x 1 1718  1 y 1 1718  1 z 1 1718  
655 0 0 7 790 1794 1348 0 10 /**
 *
 */ 0 
656 0 0 7 790 1794 1348 0 0 1 6 param0 0 1795  
657 0 0 4 791 1533 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1794  
658 0 0 6 792 1529 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1794  5 point 1 1797  
659 0 0 6 792 1529 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 1794  1 x 1 1718  1 y 1 1718  
660 0 0 6 793 1529 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1795  
661 0 0 6 794 1797 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1795  1 n 1 1529  
662 0 0 4 799 1533 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 1794  
663 0 0 4 800 1533 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 1794  5 index 1 1529  
664 0 0 6 801 1689 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 1795  
665 0 0 4 802 1533 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 1794  
666 0 0 4 803 1533 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 1794  5 index 1 1529  
667 0 0 4 804 1533 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1794  
668 0 0 6 805 1529 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 1795  
669 0 0 6 806 1529 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1795  1 n 1 1529  
670 0 0 6 807 1529 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1795  1 n 1 1529  
671 0 0 6 808 1529 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1795  1 n 1 1529  
672 0 0 7 811 1798 1356 0 10 /**
 *
 */ 0 
673 0 0 7 811 1798 1356 0 0 1 6 param0 0 1799  
674 0 0 4 812 1533 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1798  
675 0 0 6 813 1529 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1798  5 point 1 1734  
676 0 0 6 813 1529 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 1798  1 x 1 1718  1 y 1 1718  1 z 1 1718  
677 0 0 6 814 1529 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1799  
678 0 0 6 815 1734 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1799  1 n 1 1529  
679 0 0 4 817 1533 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1798  
680 0 0 6 818 1733 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 1799  
681 0 0 4 665 1533 0 0 0 3 3 mat 1 1801  3 fwd 1 1737  2 cs 1 1755  
682 0 0 4 665 1533 0 0 0 4 3 mat 1 1801  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
683 0 0 4 665 1533 0 0 0 3 3 mat 1 1802  3 fwd 1 1727  2 cs 1 1755  
684 0 0 4 665 1533 0 0 0 4 3 mat 1 1802  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
685 0 0 4 665 1533 0 0 0 3 3 mat 1 1740  3 fwd 1 1737  2 cs 1 1755  
686 0 0 4 665 1533 0 0 0 4 3 mat 1 1740  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
687 0 0 4 665 1533 0 0 0 3 3 mat 1 1730  3 fwd 1 1727  2 cs 1 1755  
688 0 0 4 665 1533 0 0 0 4 3 mat 1 1730  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
689 0 0 4 665 1533 0 0 0 3 4 quat 1 1803  3 fwd 1 1737  2 cs 1 1755  
690 0 0 4 665 1533 0 0 0 4 4 quat 1 1803  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
691 0 0 4 665 1533 0 0 0 3 4 quat 1 1805  3 fwd 1 1727  2 cs 1 1755  
692 0 0 4 665 1533 0 0 0 4 4 quat 1 1805  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
693 0 0 4 666 1533 0 0 0 3 3 mat 1 1801  3 fwd 1 1737  2 cs 1 1755  
694 0 0 4 666 1533 0 0 0 4 3 mat 1 1801  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
695 0 0 4 666 1533 0 0 0 3 3 mat 1 1802  3 fwd 1 1727  2 cs 1 1755  
696 0 0 4 666 1533 0 0 0 4 3 mat 1 1802  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
697 0 0 4 666 1533 0 0 0 3 3 mat 1 1740  3 fwd 1 1737  2 cs 1 1755  
698 0 0 4 666 1533 0 0 0 4 3 mat 1 1740  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
699 0 0 4 666 1533 0 0 0 3 3 mat 1 1730  3 fwd 1 1727  2 cs 1 1755  
700 0 0 4 666 1533 0 0 0 4 3 mat 1 1730  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
701 0 0 4 666 1533 0 0 0 3 4 quat 1 1803  3 fwd 1 1737  2 cs 1 1755  
702 0 0 4 666 1533 0 0 0 4 4 quat 1 1803  3 fwd 1 1737  2 up 1 1737  2 cs 1 1755  
703 0 0 4 666 1533 0 0 0 3 4 quat 1 1805  3 fwd 1 1727  2 cs 1 1755  
704 0 0 4 666 1533 0 0 0 4 4 quat 1 1805  3 fwd 1 1727  2 up 1 1727  2 cs 1 1755  
705 0 0 4 772 1533 0 0 0 3 3 mat 1 1801  1 a 1 1737  1 b 1 1737  
706 0 0 4 772 1533 0 0 0 3 3 mat 1 1802  1 a 1 1727  1 b 1 1727  
707 0 0 4 772 1533 0 0 0 3 3 mat 1 1740  1 a 1 1737  1 b 1 1737  
708 0 0 4 772 1533 0 0 0 3 3 mat 1 1730  1 a 1 1727  1 b 1 1727  
450
1357 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 712 722 0 9 713 714 715 716 717 718 719 720 721 0 0 1 0 1358 0 0 0 0 0

1358 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 711 0 0 0 0 1 0 1359 0 0 0 0 0

1359 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 709 710 0 0 1 0 1360 0 0 0 0 0

1360 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1361 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 726 736 0 9 727 728 729 730 731 732 733 734 735 0 0 1 0 1362 0 0 0 0 0

1362 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 725 0 0 0 0 1 0 1363 0 0 0 0 0

1363 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 723 724 0 0 1 0 1360 0 0 0 0 0

1364 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 740 750 0 9 741 742 743 744 745 746 747 748 749 0 0 1 0 1365 0 0 0 0 0

1365 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 739 0 0 0 0 1 0 1366 0 0 0 0 0

1366 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 737 738 0 0 1 0 1360 0 0 0 0 0

1367 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 754 764 0 9 755 756 757 758 759 760 761 762 763 0 0 1 0 1368 0 0 0 0 0

1368 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 753 0 0 0 0 1 0 1369 0 0 0 0 0

1369 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 751 752 0 0 1 0 1360 0 0 0 0 0

1370 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 768 778 0 9 769 770 771 772 773 774 775 776 777 0 0 1 0 1371 0 0 0 0 0

1371 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 767 0 0 0 0 1 0 1372 0 0 0 0 0

1372 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 765 766 0 0 1 0 1360 0 0 0 0 0

1373 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 782 792 0 9 783 784 785 786 787 788 789 790 791 0 0 1 0 1374 0 0 0 0 0

1374 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 781 0 0 0 0 1 0 1375 0 0 0 0 0

1375 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 779 780 0 0 1 0 1360 0 0 0 0 0

1376 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 796 806 0 9 797 798 799 800 801 802 803 804 805 0 0 1 0 1377 0 0 0 0 0

1377 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 795 0 0 0 0 1 0 1378 0 0 0 0 0

1378 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 793 794 0 0 1 0 1360 0 0 0 0 0

1379 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 810 820 0 9 811 812 813 814 815 816 817 818 819 0 0 1 0 1380 0 0 0 0 0

1380 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 809 0 0 0 0 1 0 1381 0 0 0 0 0

1381 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 807 808 0 0 1 0 1360 0 0 0 0 0

1382 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 824 834 0 9 825 826 827 828 829 830 831 832 833 0 0 1 0 1383 0 0 0 0 0

1383 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 823 0 0 0 0 1 0 1384 0 0 0 0 0

1384 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 821 822 0 0 1 0 1360 0 0 0 0 0

1385 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 838 848 0 9 839 840 841 842 843 844 845 846 847 0 0 1 0 1386 0 0 0 0 0

1386 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 837 0 0 0 0 1 0 1387 0 0 0 0 0

1387 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 835 836 0 0 1 0 1360 0 0 0 0 0

1388 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 852 862 0 9 853 854 855 856 857 858 859 860 861 0 0 1 0 1389 0 0 0 0 0

1389 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 851 0 0 0 0 1 0 1390 0 0 0 0 0

1390 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 849 850 0 0 1 0 1360 0 0 0 0 0

1391 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 866 876 0 9 867 868 869 870 871 872 873 874 875 0 0 1 0 1392 0 0 0 0 0

1392 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 865 0 0 0 0 1 0 1393 0 0 0 0 0

1393 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 863 864 0 0 1 0 1360 0 0 0 0 0

1394 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 880 890 0 9 881 882 883 884 885 886 887 888 889 0 0 1 0 1395 0 0 0 0 0

1395 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 879 0 0 0 0 1 0 1396 0 0 0 0 0

1396 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 877 878 0 0 1 0 1360 0 0 0 0 0

1397 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 891 908 0 16 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 0 0 1 0 1358 0 0 0 0 0

1398 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 909 926 0 16 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 0 0 1 0 1362 0 0 0 0 0

1399 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 927 944 0 16 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 0 0 1 0 1365 0 0 0 0 0

1400 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 945 962 0 16 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 0 0 1 0 1368 0 0 0 0 0

1401 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 963 980 0 16 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 0 0 1 0 1371 0 0 0 0 0

1402 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 981 998 0 16 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 0 0 1 0 1374 0 0 0 0 0

1403 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 999 1016 0 16 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 0 0 1 0 1377 0 0 0 0 0

1404 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1017 1034 0 16 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 0 0 1 0 1380 0 0 0 0 0

1405 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1035 1052 0 16 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 0 0 1 0 1383 0 0 0 0 0

1406 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1053 1070 0 16 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 0 0 1 0 1386 0 0 0 0 0

1407 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1071 1088 0 16 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 0 0 1 0 1389 0 0 0 0 0

1408 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1089 1106 0 16 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 0 0 1 0 1392 0 0 0 0 0

1409 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1107 1124 0 16 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 0 0 1 0 1395 0 0 0 0 0

1410 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1134 0 9 1125 1126 1127 1128 1129 1130 1131 1132 1133 0 0 1 0 1411 0 0 0 2 1412 1413 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1411 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1412 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1410 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1413 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1410 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1414 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1140 0 5 1135 1136 1137 1138 1139 0 0 1 0 1410 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1415 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1145 0 4 1141 1142 1143 1144 0 0 1 0 1414 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1416 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1146 1148 0 12 1147 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1417 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1160 1162 0 12 1161 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1418 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1416 0 0 0 0 0 0 0 0 0 0

1419 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1174 1190 0 15 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 0 0 1 0 1420 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1420 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1421 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1191 1207 0 15 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 0 0 1 0 1422 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1422 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1423 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1419 0 0 0 0 0 0 0 0 0 0

1424 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1419 0 0 0 0 0 0 0 0 0 0

1425 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1421 0 0 0 0 0 0 0 0 0 0

1426 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1419 0 0 0 0 0 0 0 0 0 0

1427 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1208 1218 2 1807 1808 9 1209 1210 1211 1212 1213 1214 1215 1216 1217 2 1816 1817 0 1 0 1415 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1428 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1429 0 0 0 0 0 0 0 0 0 0

1429 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1430 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1219 1226 0 6 1220 1221 1222 1223 1224 1225 0 0 0 0 0 10
/**
 *
 */

1431 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1227 1234 0 6 1228 1229 1230 1231 1232 1233 0 0 0 0 0 10
/**
 *
 */

1432 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1430 0 0 0 0 0 0 0 0 0 0

1433 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1430 0 0 0 0 0 0 0 0 0 0

1434 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1431 0 0 0 0 0 0 0 0 0 0

1435 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1430 0 0 0 0 0 0 0 0 0 0

1436 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1235 1241 2 1809 1810 5 1236 1237 1238 1239 1240 2 1818 1819 0 1 0 1415 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1437 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1242 1249 0 6 1243 1244 1245 1246 1247 1248 0 0 1 0 1414 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1438 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1250 1256 0 5 1251 1252 1253 1254 1255 0 0 1 0 1414 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1439 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1257 1266 0 8 1258 1259 1260 1261 1262 1263 1264 1265 0 0 1 0 1415 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1440 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1267 1276 1 1811 8 1268 1269 1270 1271 1272 1273 1274 1275 1 1820 0 1 0 1414 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1441 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1443 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1279 1281 0 1 1280 0 0 0 0 1 1444 0

1444 0 0 794624 10 Mersenne:: 0 1443 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1445 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1282 1284 0 1 1283 0 0 1 0 1414 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1446 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1285 1295 1 1812 9 1286 1287 1288 1289 1290 1291 1292 1293 1294 1 1821 0 1 0 1414 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1447 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1296 1303 0 6 1297 1298 1299 1300 1301 1302 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1448 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1305 0 1 1304 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1449 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1306 1311 0 4 1307 1308 1309 1310 0 0 1 0 1448 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1450 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1312 1317 0 4 1313 1314 1315 1316 0 0 1 0 1448 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1451 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1406 0 0 0 0 0 0 0 0 0 0

1452 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1385 0 0 0 0 0 0 0 0 0 0

1453 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1405 0 0 0 0 0 0 0 0 0 0

1454 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1382 0 0 0 0 0 0 0 0 0 0

1455 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1451 0 0 0 0 0 0 0 0 0 0

1456 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1452 0 0 0 0 0 0 0 0 0 0

1457 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1455 0 0 0 0 0 0 0 0 0 0

1458 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1456 0 0 0 0 0 0 0 0 0 0

1459 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1453 0 0 0 0 0 0 0 0 0 0

1460 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1454 0 0 0 0 0 0 0 0 0 0

1461 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1398 0 0 0 0 0 0 0 0 0 0

1462 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1361 0 0 0 0 0 0 0 0 0 0

1463 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1397 0 0 0 0 0 0 0 0 0 0

1464 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1357 0 0 0 0 0 0 0 0 0 0

1465 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1461 0 0 0 0 0 0 0 0 0 0

1466 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1462 0 0 0 0 0 0 0 0 0 0

1467 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1465 0 0 0 0 0 0 0 0 0 0

1468 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1466 0 0 0 0 0 0 0 0 0 0

1469 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1463 0 0 0 0 0 0 0 0 0 0

1470 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1464 0 0 0 0 0 0 0 0 0 0

1471 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1408 0 0 0 0 0 0 0 0 0 0

1472 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1391 0 0 0 0 0 0 0 0 0 0

1473 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1407 0 0 0 0 0 0 0 0 0 0

1474 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1388 0 0 0 0 0 0 0 0 0 0

1475 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1409 0 0 0 0 0 0 0 0 0 0

1476 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1394 0 0 0 0 0 0 0 0 0 0

1477 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1471 0 0 0 0 0 0 0 0 0 0

1478 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1472 0 0 0 0 0 0 0 0 0 0

1479 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1471 0 0 0 0 0 0 0 0 0 0

1480 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1472 0 0 0 0 0 0 0 0 0 0

1481 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1473 0 0 0 0 0 0 0 0 0 0

1482 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1474 0 0 0 0 0 0 0 0 0 0

1483 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1403 0 0 0 0 0 0 0 0 0 0

1484 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1376 0 0 0 0 0 0 0 0 0 0

1485 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1402 0 0 0 0 0 0 0 0 0 0

1486 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1373 0 0 0 0 0 0 0 0 0 0

1487 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1404 0 0 0 0 0 0 0 0 0 0

1488 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1379 0 0 0 0 0 0 0 0 0 0

1489 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1483 0 0 0 0 0 0 0 0 0 0

1490 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1484 0 0 0 0 0 0 0 0 0 0

1491 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1483 0 0 0 0 0 0 0 0 0 0

1492 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1484 0 0 0 0 0 0 0 0 0 0

1493 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1485 0 0 0 0 0 0 0 0 0 0

1494 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1486 0 0 0 0 0 0 0 0 0 0

1495 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1400 0 0 0 0 0 0 0 0 0 0

1496 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1367 0 0 0 0 0 0 0 0 0 0

1497 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1399 0 0 0 0 0 0 0 0 0 0

1498 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1364 0 0 0 0 0 0 0 0 0 0

1499 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1401 0 0 0 0 0 0 0 0 0 0

1500 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1370 0 0 0 0 0 0 0 0 0 0

1501 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1495 0 0 0 0 0 0 0 0 0 0

1502 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1496 0 0 0 0 0 0 0 0 0 0

1503 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1495 0 0 0 0 0 0 0 0 0 0

1504 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1496 0 0 0 0 0 0 0 0 0 0

1505 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1497 0 0 0 0 0 0 0 0 0 0

1506 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1498 0 0 0 0 0 0 0 0 0 0

1507 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1319 1325 0 5 1320 1321 1322 1323 1324 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1508 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1326 1332 0 5 1327 1328 1329 1330 1331 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1509 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1333 1348 1 1813 14 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1 1822 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1510 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1511 0 0 0 0 0 0 0 0 0 0

1511 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1512 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1349 1356 2 1814 1815 6 1350 1351 1352 1353 1354 1355 1 1823 0 1 0 1509 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1513 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1515 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1421 0 0 0 0 0 0 0 0 0 0

1516 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1517 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1357 0 0 0 0 0 0 0 0 0 0

1518 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1519 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1521 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1522 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1524 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1525 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1528 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1529 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1530 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1531 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1532 0 0 0 0 0 0 0 0 0 0

1532 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1533 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1534 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1535 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1359 0 0 0 0 0 0 0 0 0 0

1537 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1539 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1540 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1361 0 0 0 0 0 0 0 0 0 0

1541 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1542 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1398 0 0 0 0 0 0 0 0 0 0

1544 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1545 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1546 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1547 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1548 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1549 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1363 0 0 0 0 0 0 0 0 0 0

1550 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1551 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1552 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1553 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1399 0 0 0 0 0 0 0 0 0 0

1555 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1556 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1557 0 0 0 0 0 0 0 0 0 0

1557 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1558 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1559 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1366 0 0 0 0 0 0 0 0 0 0

1561 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1562 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1563 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1564 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1565 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1400 0 0 0 0 0 0 0 0 0 0

1566 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1567 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1568 0 0 0 0 0 0 0 0 0 0

1568 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1569 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1570 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1571 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1369 0 0 0 0 0 0 0 0 0 0

1572 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1574 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1575 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1577 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1578 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1579 0 0 0 0 0 0 0 0 0 0

1579 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1580 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1581 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1582 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1372 0 0 0 0 0 0 0 0 0 0

1583 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1584 0 0 0 0 0 0 0 0 0 0

1584 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1585 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1586 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1587 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1402 0 0 0 0 0 0 0 0 0 0

1588 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1589 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1590 0 0 0 0 0 0 0 0 0 0

1590 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1591 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1592 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1594 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1596 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1597 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1598 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1403 0 0 0 0 0 0 0 0 0 0

1599 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1600 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1601 0 0 0 0 0 0 0 0 0 0

1601 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1602 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1603 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1378 0 0 0 0 0 0 0 0 0 0

1605 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1379 0 0 0 0 0 0 0 0 0 0

1607 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1608 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1609 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1404 0 0 0 0 0 0 0 0 0 0

1610 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1612 0 0 0 0 0 0 0 0 0 0

1612 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1613 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1381 0 0 0 0 0 0 0 0 0 0

1614 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1615 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1381 0 0 0 0 0 0 0 0 0 0

1616 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1617 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1618 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1619 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1620 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1405 0 0 0 0 0 0 0 0 0 0

1621 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1622 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1623 0 0 0 0 0 0 0 0 0 0

1623 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1624 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1625 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1627 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1629 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1630 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1406 0 0 0 0 0 0 0 0 0 0

1632 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1634 0 0 0 0 0 0 0 0 0 0

1634 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1635 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1387 0 0 0 0 0 0 0 0 0 0

1636 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1387 0 0 0 0 0 0 0 0 0 0

1638 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1388 0 0 0 0 0 0 0 0 0 0

1640 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1641 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1407 0 0 0 0 0 0 0 0 0 0

1643 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1645 0 0 0 0 0 0 0 0 0 0

1645 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1646 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1647 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1390 0 0 0 0 0 0 0 0 0 0

1649 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1391 0 0 0 0 0 0 0 0 0 0

1651 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1652 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1408 0 0 0 0 0 0 0 0 0 0

1654 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1655 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1657 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1658 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1659 0 0 0 0 0 0 0 0 0 0

1659 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1393 0 0 0 0 0 0 0 0 0 0

1660 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1661 0 0 0 0 0 0 0 0 0 0

1661 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1662 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1663 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1665 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1668 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1669 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1396 0 0 0 0 0 0 0 0 0 0

1671 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1397 0 0 0 0 0 0 0 0 0 0

1672 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1673 0 0 0 0 0 0 0 0 0 0

1673 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1674 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1675 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1676 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1677 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1678 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1679 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1680 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1404 0 0 0 0 0 0 0 0 0 0

1681 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1682 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1406 0 0 0 0 0 0 0 0 0 0

1683 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1684 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1685 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1686 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1688 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1689 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1690 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1691 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1693 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1694 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1698 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1415 0 0 0 0 0 0 0 0 0 0

1700 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1702 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1703 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1704 0 0 0 0 0 0 0 0 0 0

1704 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1416 0 0 0 0 0 0 0 0 0 0

1705 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1706 0 0 0 0 0 0 0 0 0 0

1706 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1697 0 0 0 0 0 0 0 0 0 0

1707 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1708 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1709 0 0 0 0 0 0 0 0 0 0

1709 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1710 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1712 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1417 0 0 0 0 0 0 0 0 0 0

1713 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1417 0 0 0 0 0 0 0 0 0 0

1715 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1716 0 0 0 0 0 0 0 0 0 0

1716 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1717 0 0 0 0 0 0 0 0 0 0

1717 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1718 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1719 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1720 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1721 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1722 0 0 0 0 0 0 0 0 0 0

1722 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1723 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1429 0 0 0 0 0 0 0 0 0 0

1725 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1420 0 0 0 0 0 0 0 0 0 0

1727 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1729 0 0 0 0 0 0 0 0 0 0

1729 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1730 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1731 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1729 0 0 0 0 0 0 0 0 0 0

1732 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1733 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1734 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1735 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1736 0 0 0 0 0 0 0 0 0 0

1736 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1422 0 0 0 0 0 0 0 0 0 0

1737 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1739 0 0 0 0 0 0 0 0 0 0

1739 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1740 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1717 0 0 0 0 0 0 0 0 0 0

1741 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1739 0 0 0 0 0 0 0 0 0 0

1742 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1743 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1524 0 0 0 0 0 0 0 0 0 0

1744 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1427 0 0 0 0 0 0 0 0 0 0

1746 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1423 0 0 0 0 0 0 0 0 0 0

1747 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1748 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1430 0 0 0 0 0 0 0 0 0 0

1750 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1751 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1431 0 0 0 0 0 0 0 0 0 0

1753 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1754 0 0 0 0 0 0 0 0 0 0

1754 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1755 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1756 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1757 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1436 0 0 0 0 0 0 0 0 0 0

1759 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1760 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1437 0 0 0 0 0 0 0 0 0 0

1762 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1763 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1423 0 0 0 0 0 0 0 0 0 0

1765 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1438 0 0 0 0 0 0 0 0 0 0

1767 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1439 0 0 0 0 0 0 0 0 0 0

1768 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1439 0 0 0 0 0 0 0 0 0 0

1770 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1771 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1772 0 0 0 0 0 0 0 0 0 0

1772 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1440 0 0 0 0 0 0 0 0 0 0

1773 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1774 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1775 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1776 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1446 0 0 0 0 0 0 0 0 0 0

1778 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1779 0 0 0 0 0 0 0 0 0 0

1779 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1447 0 0 0 0 0 0 0 0 0 0

1780 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1781 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1782 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1783 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1449 0 0 0 0 0 0 0 0 0 0

1785 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1786 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1450 0 0 0 0 0 0 0 0 0 0

1788 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1789 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1790 0 0 0 0 0 0 0 0 0 0

1790 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1507 0 0 0 0 0 0 0 0 0 0

1791 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1792 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1793 0 0 0 0 0 0 0 0 0 0

1793 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1508 0 0 0 0 0 0 0 0 0 0

1794 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1795 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1509 0 0 0 0 0 0 0 0 0 0

1797 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1798 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1799 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1512 0 0 0 0 0 0 0 0 0 0

1801 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1802 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1803 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1804 0 0 0 0 0 0 0 0 0 0

1804 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1805 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1806 0 0 0 0 0 0 0 0 0 0

1806 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
9
1807 6 points 0 66 1428 1213 0 0 0 0 1212 19 BoundingBox::points 0

1808 6 planes 0 66 1423 1215 0 0 0 0 1214 19 BoundingBox::planes 0

1809 6 points 0 66 1428 1237 0 0 0 0 1236 26 BoundingHexahedron::points 0

1810 6 planes 0 66 1423 1239 0 0 0 0 1238 26 BoundingHexahedron::planes 0

1811 10 components 0 66 1441 1272 0 0 0 0 1271 38 IntersectionBoundingVolume::components 0

1812 10 components 0 66 1441 1290 0 0 0 0 1289 31 UnionBoundingVolume::components 0

1813 8 vertices 0 66 1510 1337 0 0 0 0 1336 22 Triangulator::vertices 0

1814 8 vertices 0 66 1513 1353 0 0 0 0 1352 23 Triangulator3::vertices 0

1815 5 plane 0 2 1515 1355 0 0 0 0 0 20 Triangulator3::plane 0

8
1816 10 get_points 0 1212 1213 23 BoundingBox::get_points 0

1817 10 get_planes 0 1214 1215 23 BoundingBox::get_planes 0

1818 10 get_points 0 1236 1237 30 BoundingHexahedron::get_points 0

1819 10 get_planes 0 1238 1239 30 BoundingHexahedron::get_planes 0

1820 14 get_components 0 1271 1272 42 IntersectionBoundingVolume::get_components 0

1821 14 get_components 0 1289 1290 35 UnionBoundingVolume::get_components 0

1822 12 get_vertices 0 1336 1337 26 Triangulator::get_vertices 0

1823 12 get_vertices 0 1352 1353 27 Triangulator3::get_vertices 0

